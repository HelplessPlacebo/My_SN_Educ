{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/ToDoLists/ToDoListTasks/Tasks.module.css","components/Header/Header.module.css","components/assetss/images/loader1.gif","components/assetss/common/Loader/LoaderStyles.module.css","components/Profile/UserInfo/Contact.module.css","components/assetss/images/viewed1.jpg","components/assetss/images/closeButton.png","components/assetss/images/trash.png","components/assetss/images/userLog.jpg","components/assetss/common/ValidatorsComponents/ElementsValidators.module.css","components/Profile/UserInfo/UserInfo.module.css","components/Dialogs/Message/Messages.module.css","components/ToDoLists/ToDoLists.module.css","serviceWorker.js","API/requests.ts","data/ProfileReduser.ts","data/DIalogsReduser.ts","data/UsersReduser.ts","data/AuthReducer.ts","data/InitializatonReducer.ts","data/ToDoListsReducer.ts","data/redux-store.ts","components/Header/LogOutButton.tsx","components/Header/AcountIcon.tsx","components/Header/MessagesIcon.tsx","components/Header/UsersIcon.tsx","components/Header/ToDoListsIcon.tsx","components/Header/Header.tsx","components/assetss/common/Loader/Loader.tsx","data/ProfileSelectors.ts","data/AuthSelectors.ts","data/InitialozationSelectors.ts","components/Header/HeaderContainer.tsx","components/Dialogs/DialogInfo.tsx","components/Dialogs/Dialogs.tsx","components/hocs/AuthRedirect.js","data/DialogsSelectors.ts","components/Dialogs/DialogsContainer.tsx","components/assetss/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/MaterialUI/ModalWindow/UserSearchModal.tsx","components/Users/FindUser.tsx","components/Users/SelectPageSize..tsx","components/Users/Users.tsx","data/Users-Selectors.ts","components/Users/UsersContainer.tsx","components/Profile/UserInfo/ProfileStatusF.tsx","components/Profile/UserInfo/Contact.tsx","components/Profile/UserInfo/ProfileData.tsx","components/Profile/UserInfo/ProfileAvatar.tsx","components/assetss/common/ValidatorsComponents/ElementsValidators.js","components/utils/validators.tsx","components/Profile/UserInfo/ProfileDataEditorForm.tsx","components/Profile/UserInfo/SendMessageOnUserPage.tsx","components/Profile/UserInfo/UserInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsConteiner.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Dialogs/Message/DeleteConfirmWindow.tsx","components/Dialogs/Message/DeleteMessage.tsx","components/Dialogs/Message/MessagesWithUser.tsx","components/Dialogs/Message/MessagesContainer.tsx","components/Login/Login.tsx","components/Login/AuthInfo.jsx","components/MaterialUI/ModalWindow/LoginModal.jsx","components/Login/LoginPage.tsx","components/ToDoLists/CreateNewToDoList/TextFieldToDoLists.tsx","components/ToDoLists/CreateNewToDoList/CreateNewToDoList.tsx","components/ToDoLists/DeleteToDoList.tsx","components/ToDoLists/EditButton.tsx","components/ToDoLists/ListMenu.tsx","components/ToDoLists/SaveButton.tsx","components/ToDoLists/GoBackButton.tsx","components/ToDoLists/TitleChangeField.tsx","components/ToDoLists/AddNewTask/AddNewTaskButton.tsx","components/ToDoLists/AddNewTask/AddNewTaskField.tsx","components/ToDoLists/AddNewTask/AddNewTask.tsx","components/ToDoLists/ToDoListTasks/ShowTasksButton.tsx","components/ToDoLists/ToDoListTasks/HideTasksButton.tsx","components/ToDoLists/ToDoListTasks/DeleteTaskButton.tsx","components/ToDoLists/ToDoListTasks/DoneIcone.tsx","components/ToDoLists/ToDoListTasks/EditTaskButton.tsx","components/ToDoLists/ToDoListTasks/TaskShowDetailsIcon.tsx","components/ToDoLists/ToDoListTasks/TaskHideDetails.tsx","components/utils/dateTransform.ts","components/ToDoLists/ToDoListTasks/TaskDetails.tsx","components/ToDoLists/ToDoListTasks/NotDoneIcon.tsx","components/ToDoLists/ToDoListTasks/TaskEditForm.tsx","components/ToDoLists/ToDoListTasks/Task.tsx","components/ToDoLists/ToDoListTasks/Tasks.tsx","components/ToDoLists/ToDoList.tsx","components/ToDoLists/ToDoLists.tsx","data/ToDoListsSelectors.ts","components/ToDoLists/ToDoListsContainer.tsx","App.tsx","index.js","components/Dialogs/Dialogs.module.css","components/Login/login.module.css","components/assetss/images/userPhoto.jpg","components/Users/Users.module.css","components/Users/FindUser.module.css","components/ToDoLists/CreateNewToDoList/CreateNewToDoList.module.css","components/Profile/UserInfo/ProfileData.module.css","components/assetss/common/Paginator/Paginator.module.css"],"names":["module","exports","pp","marginPost","button","item","img","like","Main","MainWrapper","TaskBodyWrapper","deadline","description","Ramka","DoneRamka","ToTrashIcon","iconStatus","Title","DetailsButton","detailsWrapper","startDate","descriptionText","TaskEditButton","TaskFormWrapper","TaskEditFromButtons","GoBackButton","MainFormWrapper","CompletedInput","FormDescription","priority","TaskFormSaveButton","CompletedFieldWrapper","cc","header","IconsWrapper","log","MessagesIconStyle","accountIconUserName","loginPosition","loginButton","active","startPosition","LogOutStyle","unloginedHeader","unloginedUsersIcon","__webpack_require__","p","small","medium","large","contact","formControl","error","textarea","input","TextAreaMessage","textareaAboutMe","ContactFormInput","TextAreaDialogsMessage","TaskFormInput","userdescrition","UserPhoto","ProfileName","UserName","FormError","goback","MyContacts","ContactsForm","MyName","buttonSaveChanges","buttonGoBack","EditorFormBG","AddPhotoButtonPosition","MessageFormStyle","dateStyle","messageText","UserNameInMessages","viewed","fontStyles","confirmDeletingWindow","confirmDeletingWindowButtons","buttontsDelta","confirmDeletingWindowHeader","confirmDeletingWindowText","imgClose","deleteMessageStyle","wrapper","ToDoListsPosition","ToDolistsWrapper","ToDoListTitle","ToDolistsChanchingWrapper","ToDoListChangingInput","EditButtonPostition","AddNewTaskWrapper","AddTaskButton","ShowTasksButton","HideTasksButton","TasksContent","tasksposititon","Boolean","window","location","hostname","match","instance","axios","create","withCredentials","baseURL","headers","API-KEY","instanceToDoLists","API","getUsers","_getUsers","Object","asyncToGenerator","regenerator_default","a","mark","_callee","currentPage","pageSize","response","_args","arguments","wrap","_context","prev","next","length","undefined","get","concat","sent","abrupt","data","stop","apply","this","AuthMe","_AuthMe","_callee2","_context2","getProfile","_getProfile","_callee3","ProfileID","_context3","_x","DelSub","_DelSub","_callee4","userId","_context4","delete","_x2","AddSub","_AddSub","_callee5","_context5","post","_x3","getProfileStatus","_getProfileStatus","_callee6","_context6","_x4","setProfileStatus","_setProfileStatus","_callee7","status","_context7","put","_x5","Login","_Login","_callee8","email","password","rememberMe","captcha","_context8","_x6","_x7","_x8","_x9","LogOut","_LogOut","_callee9","_context9","LoadPhotoOnServer","_LoadPhotoOnServer","_callee10","photo","formdata","_context10","FormData","append","Content-Type","_x10","PutProfileDataOnServer","_PutProfileDataOnServer","_callee11","profile","_context11","_x11","GetCaptchaFromServer","_GetCaptchaFromServer","_callee12","_context12","url","GetAllDialogs","_GetAllDialogs","_callee13","_context13","GetNewMessagesFromServer","_GetNewMessagesFromServer","_callee14","DialoguserID","_context14","_x12","SendNewMessage","_SendNewMessage","_callee15","NewMessage","_context15","body","_x13","_x14","GetNewMessagesCount","_GetNewMessagesCount","_callee16","_context16","DeleteMessage","_DeleteMessage","_callee17","MessageID","_context17","_x15","FindUser","_FindUser","_callee18","_context18","_x16","GetToDoLists","_GetToDoLists","_callee19","_context19","CreateNewToDoList","_CreateNewToDoList","_callee20","title","_context20","_x17","DeleteToDoList","_DeleteToDoList","_callee21","todolistId","res","_context21","_x18","ChangeToDoListTitle","_ChangeToDoListTitle","_callee22","_context22","_x19","_x20","GetToDoListTasks","_GetToDoListTasks","_callee23","count","page","_args23","_context23","_x21","CreateNewTaskForToDoList","_CreateNewTaskForToDoList","_callee24","Tasktitle","DataResponse","_context24","_x22","_x23","ChangeTaskInformation","_ChangeTaskInformation","_callee25","taskid","_context25","_x24","_x25","_x26","DeleteTaskFromToDoList","_DeleteTaskFromToDoList","_callee26","_context26","_x27","_x28","DefaultState","Posts","IsMyPage","OwnName","IsFetching","SetStatusOfUser","type","SetPhotoOfUser","SetIsFetching","GetProfileThunk","_ref","dispatch","getState","MyID","Profile","Auth","MyOwnName","fullName","ProfileReducer","state","action","NewPost","id","Post","newtext","likesCount","objectSpread","toConsumableArray","photos","bool","AllDialogs","DialogsMessages","InterlocutorAvatar","UserAvatar","NewMessagesCount","SetNewMessagesCount","SetIsFetchingDialogs","GetNewMessagesThunk","_ref2","DialogsMessagesInfo","NewMessagesData","SendNewMessageThunk","_ref3","resultCode","GetNewMessagesCountThunk","_ref6","DialogsReducer","NewAllDialogs","newInterlocutorAvatar","Users","totalUsersCount","FindUserIsFetching","InProcess","PortionSize","FoundedUsers","OnFollow","userID","onUnFollow","ToggleIsFetching","ToggleFindUserIsFetching","ToggleInProcess","InProgress","UserID","UsersReducer","map","us","followed","users","filter","PortionSizeChangingValue","NewFoundedUsers","PageSize","IsLogined","CaptchaUrl","login","SetAuthUser","AuthMeThunk","AuthInfo","_AuthInfo$data","GetCaptchaThunk","_ref4","captchaURL","CaptchaURL","AuthReducer","inition","InitializateReducer","ToDoLists","ToDoListTasks","ToDoListTasksPage","ToDoListTasksCount","TaskIsFetching","SetTaskIsFetching","GetToDoListsThunk","NewToDoLists","GetToDoListTasksThunk","ToDoListID","_ref5","Tasks","items","ToDoListsReducer","NewToDoListTasksPage","NewToDoListTasksCount","reducers","combineReducers","ProfileData","MessagesData","UsersData","form","formReducer","Init","ToDoListsData","store","createStore","applyMiddleware","thunkMiddleWare","LogOutButton","props","react_default","createElement","className","HS","onClick","LogOutThunk","handleMenuClose","AccountIconComponent","_useState","useState","_useState2","slicedToArray","anchorEl","setAnchorEl","isMenuOpen","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","open","onClose","hs","react_router_dom","to","MenuItem","Header_LogOutButton","IconButton","edge","aria-label","aria-controls","aria-haspopup","event","currentTarget","color","AccountCircle_default","MessagesIcon","Badge_default","badgeContent","toString","Mail_default","People_default","ToDoListsIcon","ListAlt_default","Header","NMC","SetNMC","useEffect","hc","activeClassName","Header_ToDoListsIcon","UsersIcon","MessagesIconPosition","Header_MessagesIcon","AcountIcon","Preloader","ls","src","LoadingSvg","GetProfileSelector","GetStatusSelector","GetIsMyPageSelector","GetPostsSelector","GetOwnNameSelector","GetProfileIsFetching","GetUserIDSelector","GetIsLoginedSelector","GetLoginSelector","GetIsFetchingSelector","GetinitionSelector","GetNewMessagesCountSelector","HeaderContainer","prevProps","prevState","Fragment","Loader","components_Header_Header","React","Component","connect","UserProfile","OwnID","DialogInfo","date","MessageSendTime","split","time","d","DialogArea","pc","DialogUserName","DialogUserPhoto","DialogUserAvatar","padding","Dialogs","el","Dialogs_DialogInfo","key","userName","newMessagesCount","lastDialogActivityDate","MapStateToPropsForRedirect","AuthRedirect","RedirectComp","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","value","react_router","GetAllDialogsSelector","GetIsFetchingDialogs","GetDialogsMessagesSelector","GetUserAvatarSelector","GetinterlocutorAvatarSelector","DialogsContainer","GetAllDialogsThunk","components_Dialogs_Dialogs","compose","withRouter","Paginator","pagesCount","Math","ceil","pages","i","push","PortionNumber","SetPortionNumber","LeftBorderOfPortion","RightBorderOfPortion","PortionCount","PS","setNumbers","NumbersFont","numbers","ev","OnChangedPage","User","um","user","name","disabled","some","OnUnFollow","unfollow","follow","FindUserModal","setOpen","handleClose","Button","variant","Dialog","DialogTitle","DialogContent","DialogContentText","TextField","onChange","OnFindUserFieldValueChanging","autoFocus","margin","fullWidth","DialogActions","SubmitModal","SetFoundedUsers","_useState3","_useState4","FindUserFieldValue","SetFindUserFieldValue","_useState5","_useState6","FoundingMode","SetFoundingMode","FindUserThunk","FUStyles","foundArea","SearchingResult","FoundedUsersWrapper","Users_User","GoBack","FindUserButton","UserSearchModal","useStyles","makeStyles","theme","createStyles","display","marginTop","spacing","minWidth","ControlledOpenSelect","classes","setCount","FormControl","InputLabel","Select","labelId","onOpen","target","OnPageSizeChange","PurifyUsers","ChangePortionSize","Users_FindUser","SelectPageSize_","UsersWrapper","PaginatorPosition","common_Paginator_Paginator","GetUsers","GetPageSize","GetTotalUsersCount","GetCurrentPage","GetIsFeching","GetInProgress","GetPortionSize","GetFoundedUserSelector","UsersContainer","pageNumber","_this","SetCurrentPage","getUsersThunk","ChangePageSize","Users_Users","followThunk","unfollowThunk","totalCount","stopSubmit","_error","messages","ProfileStatusF","IsStatusChanging","SetIsStatusChanging","Status","SetStatus","e","onBlur","SetProfileStatus","Contact","ContactValue","cs","ContactName","ProfileContacts","keys","contacts","ProfileContactsValues","pds","aboutME","aboutMe","lookingForAJob","lookingForAJobDescription","buttonEditInformation","ContactsEditingOn","values","UserInfo_Contact","ProfileAvatar","SelectPhoto","files","SetProfilePhoto","accept","htmlFor","AddAPhoto_default","TextArea","meta","objectWithoutProperties","touched","EVS","assign","TextAreaAboutMe","Input","InputName","_ref7","_ref8","CreateField","placeholder","validators","component","text","Field","validate","required","MaxLengthCreator","MaxLengthValue","max300","max150","max50","ProfileDataEditorForm","onSubmit","handleSubmit","ContactsEditingOFF","maxLength300","ReduxSendMessageOnUserPageForm","reduxForm","lm","AuthError","MessageSendingModOFF","SendMessageOnUserPage","ChosedSendMessage","SetChosedSendMessage","Formdata","MessageFromUserPage","ProfileDataEditorFormRedux","UserInfo","ContactsIsEditing","SetContactsIsEditing","PutNewProfileInfoToServer","formData","SaveProfileData","UserInfo_ProfileAvatar","UserInfo_ProfileStatusF","UserInfo_SendMessageOnUserPage","initialValues","UserInfo_ProfileData","message","likecount","maxValue250","ReduxMyPostForm","MyPosts","memo","posts","MyPosts_Post_Post","addpost","PostMessage","MyPostsConteiner","MyPosts_MyPosts","PureComponent","Profile_UserInfo_UserInfo","MyPosts_MyPostsConteiner","ProfileContainer","params","SetIsMyPage","history","GetProfileStatusThunk","ProfileDataToPaint","components_Profile_Profile","SetProfileStatusThunk","SetProfilePhotoThunk","UpdateProfileInfoThunk","ProfileStatus","LoadPhotoOnServerResult","profileID","PutProfileDataOnServerResult","Promise","reject","DeleteConfirmWindow","closeWindow","SetToConfirmDeleting","ms","ToConfirmDeleting","CloseButton","deleteMessage","ConfirmText","ToTrash","Message_DeleteConfirmWindow","DeleteMessageThunk","maxValue300","ReduxMessageWithUserForm","MessagesWithUser","MessagesWithUserData","SetMessagesData","mwuStyles","addedAt","senderName","senderId","Message_DeleteMessage","Viewed","MessageTextArea","MessagesContainer","DialogUserID","GetInterlocutorAvatarThunk","GetProfileAvatarThunk","Message_MessagesWithUser","InterlocutorAvatarData","maxLength50","ReduxLoginForm","LoginUserPhoto","imgUser","passwordField","LoginThunk","LoginInfo","typography","HowToAuth","_React$useState","_React$useState2","aria-describedby","Popover","Typography","withStyles","root","closeButton","position","right","top","palette","grey","children","other","disableTypography","Close_default","LoginModalWindow","MuiDialogContent","CustomizedDialogs","aria-labelledby","LoginModal_DialogTitle","dividers","components_Login_Login","LoginPage","LoginPageAlarm","AuthButton","InputWithIcon","Grid","container","alignItems","OnTextFieldCreateNewToDoListChanging","CreateNewToDoListMode","SetCreateNewToDoListMode","CurrentValueOfCreateNewToDoListInput","SetCurrentValueOfCreateNewToDoListInput","TDlistS","CreateAndGoBackButtons","AddNewListButton","GoBacktButton","AddNewListWrapper","TextFieldToDoLists","AddNewToDoListsThunk","Addbutton","DeleteToDoListButton","ShowTasksMode","Del","ListID","size","startIcon","Delete_default","EditButton","Fab","ButtonSize","Edit_default","HandleOnEdit","ToDoListMenuIcon","TDLS","ToDoLists_EditButton","EditTitleModeON","ToDoLists_DeleteToDoList","MoreVert_default","SaveButton","CurrentToDoListTitle","ChangeToDoListTitleThunk","EditTitleModeOFF","Save_default","HandleOnClick","ArrowBack_default","flexWrap","textField","marginLeft","marginRight","width","TitleChangingField","noValidate","autoComplete","OnToDoListTitleChanging","helperText","AddNewTaskButton","AddNewTaskFieldCurrentValue","AddNewTaskThunk","AddTaskField","OnAddNewTaskFieldChange","AddNewTask","SetAddNewTaskFieldCurrentValue","AddNewTaskField","AddNewTask_AddNewTaskButton","ButtonIsDesabled","KeyboardArrowDown_default","KeyboardArrowUp_default","DeleteButton","ShowButtonBlocked","DeleteTaskThunk","TaskID","DeleteOutline_default","TaskDoneIcon","Done_default","EditTaskButton","TaskShowDetailsIcon","TaskHideDetailsIcon","DateTransform","join","reverse","TaskDetails","ShowDetails","SetShowDetails","AddedDate","CurrentTask","DeadLineDate","ts","TaskHideDetails","ShowButtonBlockedOFF","ToDoListTasks_TaskShowDetailsIcon","ShowButtonBlockedON","NotDoneIcon","Clear_default","maxlength50","maxlength100","TaskEditForm","ToDoLists_GoBackButton","TaskEditModeOFF","TaskExecutedStyleForWindow","TaskEditFormRedux","Task","_classNames","TaskEditMode","SetTaskEditMode","completed","TrueStartDate","TrueDeadLine","classNames","defineProperty","TrueObjMaker","todoListId","UpdateTaskInformationThunk","ToDoListTasks_EditTaskButton","DoneIcone","ToDoListTasks_NotDoneIcon","DeleteTaskButton","ToDoListTasks_TaskDetails","TasksData","SetTasksData","SetShowButtonBlocked","task","ToDoListTasks_Task","ToDoList","EditTitleMode","SetEditTitleMode","SetShowTasksMode","SetToDoListTitle","ToDoLists_SaveButton","TitleChangeField","ListMenu","DeleteToDoListThunk","ToDoLists_AddNewTask_AddNewTask","ToDoListTasks_Tasks","ToDoListTasks_HideTasksButton","ButtonIsDesabledOFF","ToDoListTasks_ShowTasksButton","ButtonIsDesabledON","SetButtonIsDesabled","ToDoLists_CreateNewToDoList_CreateNewToDoList","ToDoLists_ToDoList","GetToDoListTasksPage","GetToDoListTasksCount","GetToDoListIsFetching","GetToDoListTaskIsFetching","ToDoListsContainer","components_ToDoLists_ToDoLists","SetToDoListTasksPage","SetToDoListTasksCount","Newtitle","TaskTitle","TaskId","ChangeTaskInformationResult","App","InitializationAPPthunk","Header_HeaderContainer","exact","path","render","Dialogs_DialogsContainer","Message_MessagesContainer","Profile_ProfileContainer","Users_UsersContainer","Login_LoginPage","ToDoLists_ToDoListsContainer","promise","MyId","all","ReactDOM","basename","process","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","dialogs","dialogsItems","activeLink","bg","bg10","logModalWindow","check","Names","Country","City"],"mappings":"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","file":"static/js/main.f200ac44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pp\":\"MyPosts_pp__oOvBm\",\"marginPost\":\"MyPosts_marginPost__1eXDQ\",\"button\":\"MyPosts_button__BRsVY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__GvU_X\",\"img\":\"Post_img__1drkR\",\"like\":\"Post_like__VlEH_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Tasks_Main__3BWH0\",\"MainWrapper\":\"Tasks_MainWrapper__2pj1b\",\"TaskBodyWrapper\":\"Tasks_TaskBodyWrapper__3ij9J\",\"deadline\":\"Tasks_deadline__1U-ZC\",\"description\":\"Tasks_description__KV7_2\",\"Ramka\":\"Tasks_Ramka__37PWH\",\"DoneRamka\":\"Tasks_DoneRamka__2sVcb\",\"ToTrashIcon\":\"Tasks_ToTrashIcon__1Bzva\",\"iconStatus\":\"Tasks_iconStatus__1GMe_\",\"Title\":\"Tasks_Title__2ZCqX\",\"DetailsButton\":\"Tasks_DetailsButton__2e43T\",\"detailsWrapper\":\"Tasks_detailsWrapper__1fEsw\",\"startDate\":\"Tasks_startDate__3m-5Q\",\"descriptionText\":\"Tasks_descriptionText__2aPsR\",\"TaskEditButton\":\"Tasks_TaskEditButton__1ow_D\",\"TaskFormWrapper\":\"Tasks_TaskFormWrapper__16blE\",\"TaskEditFromButtons\":\"Tasks_TaskEditFromButtons__4TxdW\",\"GoBackButton\":\"Tasks_GoBackButton__egsQ4\",\"MainFormWrapper\":\"Tasks_MainFormWrapper__10W0X\",\"CompletedInput\":\"Tasks_CompletedInput__3ka7Y\",\"FormDescription\":\"Tasks_FormDescription__3jOQy\",\"priority\":\"Tasks_priority__1YFGo\",\"TaskFormSaveButton\":\"Tasks_TaskFormSaveButton__3p1s_\",\"CompletedFieldWrapper\":\"Tasks_CompletedFieldWrapper__15geq\",\"cc\":\"Tasks_cc__2tHYr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3L50G\",\"IconsWrapper\":\"Header_IconsWrapper__O29iG\",\"item\":\"Header_item__2BL1D\",\"log\":\"Header_log__2oet5\",\"MessagesIconStyle\":\"Header_MessagesIconStyle__4F9-k\",\"accountIconUserName\":\"Header_accountIconUserName__1yn7c\",\"loginPosition\":\"Header_loginPosition__1Mv6C\",\"loginButton\":\"Header_loginButton__1rOO6\",\"active\":\"Header_active__wKwwX\",\"startPosition\":\"Header_startPosition__18IcE\",\"LogOutStyle\":\"Header_LogOutStyle__2lzry\",\"unloginedHeader\":\"Header_unloginedHeader__3-WWO\",\"unloginedUsersIcon\":\"Header_unloginedUsersIcon__1vMde\"};","module.exports = __webpack_public_path__ + \"static/media/loader1.54c96e01.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"small\":\"LoaderStyles_small__vpz8E\",\"medium\":\"LoaderStyles_medium__1KoLf\",\"large\":\"LoaderStyles_large__3v2ZG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__8hXUq\"};","module.exports = __webpack_public_path__ + \"static/media/viewed1.1334aba6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/closeButton.8c53b830.png\";","module.exports = __webpack_public_path__ + \"static/media/trash.99ef094b.png\";","module.exports = __webpack_public_path__ + \"static/media/userLog.ae20f8de.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"ElementsValidators_formControl__2NyA5\",\"error\":\"ElementsValidators_error__3FUa5\",\"textarea\":\"ElementsValidators_textarea__3cIBd\",\"button\":\"ElementsValidators_button__tZ8xv\",\"input\":\"ElementsValidators_input__23YpE\",\"TextAreaMessage\":\"ElementsValidators_TextAreaMessage__16qP9\",\"textareaAboutMe\":\"ElementsValidators_textareaAboutMe__1i4aL\",\"ContactFormInput\":\"ElementsValidators_ContactFormInput__2F0Oc\",\"TextAreaDialogsMessage\":\"ElementsValidators_TextAreaDialogsMessage__3UVNe\",\"TaskFormInput\":\"ElementsValidators_TaskFormInput__TDX_l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userdescrition\":\"UserInfo_userdescrition__3mhuU\",\"UserPhoto\":\"UserInfo_UserPhoto__28MeR\",\"ProfileName\":\"UserInfo_ProfileName__ioqSD\",\"UserName\":\"UserInfo_UserName__3jEfi\",\"FormError\":\"UserInfo_FormError__EPiL-\",\"goback\":\"UserInfo_goback__3tajc\",\"MyContacts\":\"UserInfo_MyContacts__3Cxig\",\"input\":\"UserInfo_input__1T4oP\",\"ContactsForm\":\"UserInfo_ContactsForm__1gWsD\",\"MyName\":\"UserInfo_MyName__ybeTv\",\"buttonSaveChanges\":\"UserInfo_buttonSaveChanges__28dF5\",\"buttonGoBack\":\"UserInfo_buttonGoBack__1urJa\",\"EditorFormBG\":\"UserInfo_EditorFormBG__1shzc\",\"AddPhotoButtonPosition\":\"UserInfo_AddPhotoButtonPosition__1puDA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageFormStyle\":\"Messages_MessageFormStyle__3_75P\",\"dateStyle\":\"Messages_dateStyle__1z3DB\",\"img\":\"Messages_img__3OsI6\",\"messageText\":\"Messages_messageText__1fb-7\",\"UserNameInMessages\":\"Messages_UserNameInMessages__1eMkc\",\"viewed\":\"Messages_viewed__2S_Ep\",\"fontStyles\":\"Messages_fontStyles__1kczt\",\"confirmDeletingWindow\":\"Messages_confirmDeletingWindow__1l7zx\",\"confirmDeletingWindowButtons\":\"Messages_confirmDeletingWindowButtons___hBhx\",\"buttontsDelta\":\"Messages_buttontsDelta__FwB_z\",\"confirmDeletingWindowHeader\":\"Messages_confirmDeletingWindowHeader__3O44g\",\"confirmDeletingWindowText\":\"Messages_confirmDeletingWindowText__1CX63\",\"imgClose\":\"Messages_imgClose__2UMNq\",\"deleteMessageStyle\":\"Messages_deleteMessageStyle__1uqFk\",\"wrapper\":\"Messages_wrapper__miyNy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ToDoListsPosition\":\"ToDoLists_ToDoListsPosition__3MkVI\",\"ToDolistsWrapper\":\"ToDoLists_ToDolistsWrapper__220tE\",\"ToDoListTitle\":\"ToDoLists_ToDoListTitle__LyiG1\",\"ToDolistsChanchingWrapper\":\"ToDoLists_ToDolistsChanchingWrapper__2Edj6\",\"ToDoListChangingInput\":\"ToDoLists_ToDoListChangingInput__aFOXL\",\"EditButtonPostition\":\"ToDoLists_EditButtonPostition__2h4K0\",\"AddNewTaskWrapper\":\"ToDoLists_AddNewTaskWrapper__3B8fo\",\"AddTaskButton\":\"ToDoLists_AddTaskButton__2QYQ2\",\"ShowTasksButton\":\"ToDoLists_ShowTasksButton__23yFD\",\"HideTasksButton\":\"ToDoLists_HideTasksButton__1OJJX\",\"TasksContent\":\"ToDoLists_TasksContent__NmQUx\",\"tasksposititon\":\"ToDoLists_tasksposititon__2Frvl\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\r\nimport {TProfile} from \"../components/GlobalTypes/ProfileTypes/ProfileTypes\";\r\nimport {\r\n    TAuthMeRes, TCreateNewTaskForToDoListRes, TCreateNewToDoListRes,\r\n    TDefRes, TGetCaptchaFromServerRes,\r\n    TLoadPhotoOnServerRes,\r\n    TLoginRes, TSendNewMessageRes,\r\n} from \"../components/GlobalTypes/RequestsTypes/RequestsTypes\";\r\nimport {TFoundedUser} from \"../components/GlobalTypes/UsersTypes/UsersTypes\";\r\nimport {TDialogMessages} from \"../components/GlobalTypes/DialogsTypes/MessagesTypes\";\r\nimport {\r\n    ToDoListTaskStatusType,\r\n    TToDoList,\r\n    TToDoListTasks\r\n} from \"../components/GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\nimport {TDialogs} from \"../components/GlobalTypes/DialogsTypes/DialogsTypes\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\r\n    }\r\n})\r\n\r\nconst instanceToDoLists = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    headers: {\r\n        \"API-KEY\": \"96428d9a-0d9d-4cb1-8a30-3ebf6693ac4b\"\r\n    }\r\n})\r\n/*\r\nconst MyServerInstance = axios.create({\r\n    baseURL: 'http://localhost:5000/'\r\n})\r\n*/\r\n\r\nexport const API = {\r\n\r\n    async getUsers(currentPage = 1, pageSize = 10) {\r\n        const response = await instance.get<TFoundedUser>(`users?page=${currentPage}&count=${pageSize}`)\r\n        return response.data\r\n    },\r\n\r\n    async AuthMe() {\r\n        const response = await instance.get<TAuthMeRes>(`auth/me`)\r\n        return response.data\r\n    },\r\n\r\n    async getProfile(ProfileID : number  | null) {\r\n        const response = await instance.get<TProfile>(`profile/` + ProfileID)\r\n        return response.data\r\n    },\r\n\r\n    async DelSub(userId : number) {\r\n        const response = await instance.delete<TDefRes>(`follow/${userId}`)\r\n        return response.data\r\n    },\r\n\r\n    async AddSub(userId : number ) {\r\n        const response = await instance.post<TDefRes>(`follow/${userId}`)\r\n        return response.data\r\n    },\r\n\r\n    async getProfileStatus(ProfileID : number | null ) {\r\n        const response = await instance.get<string>(`profile/status/` + ProfileID)\r\n        return response.data\r\n    },\r\n\r\n    async setProfileStatus(status : string | null) {\r\n        const response = await instance.put<TDefRes>(`profile/status/`, {status: status})\r\n        return response.data\r\n    },\r\n\r\n    async Login(email : string | null, password : string | null, rememberMe : boolean | null, captcha : string | null | undefined) {\r\n        const response = await instance.post<TLoginRes>(`auth/login/`, {\r\n            email: email,\r\n            password: password,\r\n            rememberMe: rememberMe,\r\n            captcha: captcha\r\n        })\r\n        return response.data\r\n    },\r\n\r\n    async LogOut() {\r\n        const response = await instance.delete<TDefRes>(`auth/login`)\r\n        return response.data\r\n\r\n    },\r\n\r\n    async LoadPhotoOnServer(photo : File) {\r\n        const formdata = new FormData()\r\n        formdata.append(\"image\", photo)\r\n        const response = await instance.put<TLoadPhotoOnServerRes>('profile/photo', formdata, {\r\n            //@ts-ignore\r\n            'Content-Type': 'multipart/form-data'\r\n        })\r\n        return response.data\r\n    },\r\n    async PutProfileDataOnServer(profile : TProfile) {\r\n        const response = await instance.put<TDefRes>('profile', profile)\r\n        return response.data\r\n    },\r\n    async GetCaptchaFromServer() {\r\n        const response = await instance.get<TGetCaptchaFromServerRes>('security/get-captcha-url')\r\n        return response.data.url\r\n    },\r\n    async GetAllDialogs() {\r\n        const response = await instance.get<TDialogs>('dialogs')\r\n        return response.data\r\n    },\r\n    async GetNewMessagesFromServer(DialoguserID : number ) {\r\n        const response = await instance.get<TDialogMessages>(`dialogs/${DialoguserID}/messages`)\r\n        return response.data\r\n    },\r\n    async SendNewMessage(userId : number, NewMessage : string) {\r\n        const response = await instance.post<TSendNewMessageRes>(`dialogs/${userId}/messages`, {\r\n            body: NewMessage\r\n        })\r\n        return response.data\r\n    },\r\n    async GetNewMessagesCount() {\r\n        const response = await instance.get<number>('dialogs/messages/new/count')\r\n        return response.data\r\n    },\r\n    async DeleteMessage(MessageID :number) {\r\n        const response = await instance.delete<TDefRes>(`dialogs//messages/${MessageID}`)\r\n        return response.data\r\n    },\r\n    async FindUser(UserName : string) {\r\n        const response = await instance.get<TFoundedUser>(`users?term=${UserName}`)\r\n        return response.data\r\n    },\r\n    async GetToDoLists() {\r\n        const response = await instance.get<Array<TToDoList>>('todo-lists')\r\n        return response.data\r\n    },\r\n    async CreateNewToDoList(title : string) {\r\n        const response = await instance.post<TCreateNewToDoListRes>('todo-lists', {title: title})\r\n        return response.data\r\n    },\r\n    async DeleteToDoList(todolistId : string) {\r\n       const res = await instance.delete<TDefRes>(`todo-lists/${todolistId}`)\r\n        return res.data\r\n    },\r\n    async ChangeToDoListTitle(todolistId :string, title : string) {\r\n       const res =  await instance.put<TDefRes>(`todo-lists/${todolistId}`, {\r\n            title: title\r\n        })\r\n        return res.data\r\n    },\r\n    async GetToDoListTasks(todolistId : string, count = 10, page = 1) {\r\n        const response = await instance.get<TToDoListTasks>(`todo-lists/${todolistId}/tasks?count=${count}&page=${page}`)\r\n        return response.data\r\n    },\r\n\r\n    async CreateNewTaskForToDoList(todolistId : string, Tasktitle : string) {\r\n        const DataResponse = await instance.post<TCreateNewTaskForToDoListRes>(`todo-lists/${todolistId}/tasks`, {\r\n            title: Tasktitle\r\n        })\r\n        return DataResponse.data\r\n    },\r\n\r\n    async ChangeTaskInformation(todolistId : string, taskid : string, status : ToDoListTaskStatusType) {\r\n\r\n        const DataResponse = await instanceToDoLists.put<TCreateNewTaskForToDoListRes>(`todo-lists/${todolistId}/tasks/${taskid}`, status)\r\n        return DataResponse.data\r\n    },\r\n    async DeleteTaskFromToDoList(todolistId : string, taskid : string) {\r\n        const DataResponse = await instanceToDoLists.delete<TDefRes>(`todo-lists/${todolistId}/tasks/${taskid}`)\r\n        return DataResponse.data\r\n    },\r\n/*    async MyServerReq(){\r\n        const Res = await MyServerInstance.get('server')\r\n        return Res\r\n    },\r\n    async MyServerPost(body){\r\n        const Res = await MyServerInstance.post('friends/add',body)\r\n        return Res\r\n    }*/\r\n}\r\n","import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {TPhotos} from \"../components/GlobalTypes/Types\"\r\nimport {NewPostType, TProfile} from \"../components/GlobalTypes/ProfileTypes/ProfileTypes\"\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\nconst add_post = 'Profile/ADD_POST'\r\nconst Set_Profile_Of_User = 'Profile/Set_Profile_Of_User'\r\nconst Set_Status_Of_User = '/Profile/Set_Status_Of_User'\r\nconst Set_Photo_Of_User = '/Profile/Set_Photo_Of_User'\r\nconst Set_Is_My_Page = '/Profile/Set_Is_My_Page'\r\nconst Set_Own_Name = '/Profile/Set_Own_Name'\r\nconst Set_IsFetching = '/Profile/Set_IsFetching'\r\n\r\nexport type TProfileReducerActions = ReturnType<typeof addpost>  | ReturnType<typeof SetStatusOfUser>\r\n    | ReturnType<typeof SetPhotoOfUser>  | ReturnType<typeof SetIsMyPage> | ReturnType<typeof SetOwnName>\r\n    | ReturnType<typeof SetIsFetching > | ReturnType<typeof setProfileOfUser>\r\n\r\ntype TProfileThunks = ThunkAction<Promise<void>, GlobalState, unknown, TProfileReducerActions>\r\n\r\nlet DefaultState = {\r\n    Posts: [] as Array<NewPostType>,\r\n    profile: null as TProfile | null,\r\n    status: \"\" as string | null,\r\n    IsMyPage: false,\r\n    OwnName: \"\" as string,\r\n    IsFetching: false\r\n}\r\ntype DefaultProfileState = typeof DefaultState\r\n\r\n\r\nconst ProfileReducer = (state = DefaultState, action: TProfileReducerActions): DefaultProfileState => {\r\n    switch (action.type) {\r\n        case add_post: {\r\n            let NewPost = {\r\n                id: 6,\r\n                Post: action.newtext,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                Posts: [...state.Posts, NewPost],\r\n            }\r\n        }\r\n        case Set_Profile_Of_User: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case Set_Status_Of_User: {\r\n            return {...state, status: action.status}\r\n        }\r\n        case Set_Photo_Of_User: {\r\n            return {\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photo} as TProfile\r\n            }\r\n        }\r\n        case Set_Is_My_Page: {\r\n            return {...state, IsMyPage: action.bool}\r\n        }\r\n        case Set_Own_Name: {\r\n            return {...state, OwnName: action.MyOwnName}\r\n        }\r\n        case Set_IsFetching: {\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addpost = (text: string) =>\r\n    (  {type: add_post, newtext: text} as const )\r\n\r\n\r\nexport const setProfileOfUser = (profile: TProfile) =>\r\n    ({type: Set_Profile_Of_User, profile}as const )\r\n\r\n\r\nexport const SetStatusOfUser = (status: string | null) =>\r\n    ({type: Set_Status_Of_User, status}as const )\r\n\r\n\r\nexport const SetPhotoOfUser = (photo: TPhotos) =>\r\n    ( {type: Set_Photo_Of_User, photo}as const )\r\n\r\n\r\nexport const SetIsMyPage = (bool: boolean) =>\r\n    ( {type: Set_Is_My_Page, bool} as const )\r\n\r\nexport const SetOwnName = (MyOwnName: string)  =>\r\n    ({type: Set_Own_Name, MyOwnName}as const )\r\n\r\nexport const SetIsFetching = (IsFetching: boolean) =>\r\n    ({type: Set_IsFetching, IsFetching}as const )\r\n\r\n\r\n\r\nexport const GetProfileThunk = (ProfileID: number | null): TProfileThunks => async (dispatch, getState) => {\r\n    const MyID = getState().Auth.userId\r\n    dispatch(SetIsFetching(true))\r\n    const Profile = await API.getProfile(ProfileID)\r\n    dispatch(setProfileOfUser(Profile))\r\n    if (Profile.userId === MyID) {\r\n        dispatch(SetOwnName(Profile.fullName))\r\n    }\r\n    dispatch(SetIsFetching(false))\r\n}\r\n\r\n\r\nexport const GetProfileStatusThunk = (userID: number | null): TProfileThunks => async (dispatch) => {\r\n    dispatch(SetIsFetching(true))\r\n    const ProfileStatus = await API.getProfileStatus(userID)\r\n    dispatch(SetStatusOfUser(ProfileStatus))\r\n    dispatch(SetIsFetching(false))\r\n}\r\n\r\nexport const SetProfileStatusThunk = (status: string | null): TProfileThunks => async (dispatch) => {\r\n    const SetProfileStatusResult = await API.setProfileStatus(status)\r\n    if (SetProfileStatusResult.resultCode === 0) {\r\n        dispatch(SetStatusOfUser(status))\r\n    }\r\n}\r\n\r\nexport const SetProfilePhotoThunk = (photo: File): TProfileThunks => async (dispatch) => {\r\n    dispatch(SetIsFetching(true))\r\n    const LoadPhotoOnServerResult = await API.LoadPhotoOnServer(photo)\r\n    if (LoadPhotoOnServerResult.resultCode === 0) {\r\n        dispatch(SetPhotoOfUser(LoadPhotoOnServerResult.data.photos))\r\n    }\r\n    dispatch(SetIsFetching(false))\r\n}\r\n\r\nexport const UpdateProfileInfoThunk = (profile: TProfile): TProfileThunks => async (dispatch, getState) => {\r\n    const profileID = getState().Auth.userId\r\n    dispatch(SetIsFetching(true))\r\n    const PutProfileDataOnServerResult = await API.PutProfileDataOnServer(profile)\r\n    if (PutProfileDataOnServerResult.resultCode === 0) {\r\n        dispatch(GetProfileThunk(profileID))\r\n    } else {\r\n        //@ts-ignore\r\n        dispatch(stopSubmit(\"ProfileDataEditorForm\", {_error: PutProfileDataOnServerResult.messages[0]}))\r\n        return Promise.reject(PutProfileDataOnServerResult.messages[0])\r\n    }\r\n    dispatch(SetIsFetching(false))\r\n}\r\n\r\n\r\nexport default ProfileReducer","import {API} from \"../API/requests\";\r\nimport {TDialogs} from \"../components/GlobalTypes/DialogsTypes/DialogsTypes\"\r\nimport {TDialogMessages, TDialoguserID} from \"../components/GlobalTypes/DialogsTypes/MessagesTypes\"\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\n\r\nconst Set_All_Dialogs = 'Dialogs/Set_All_Dialogs'\r\nconst Set_New_Messages = 'Dialogs/Set_New_Messages'\r\nconst Set_InterlocutorAvatar = 'Dialogs/Set_InterlocutorAvatar'\r\nconst Set_UserAvatarForDialogs = 'Dialogs/Set_UserAvatarForDialogs'\r\nconst Set_NewMessagesCount = 'Dialogs/Set_NewMessagesCount'\r\nconst Set_IsFetching = 'Dialogs/Set_IsFetching'\r\n\r\n\r\nlet DefaultState = {\r\n    AllDialogs: [] as TDialogs | null,\r\n    DialogsMessages: {} as TDialogMessages | null,\r\n    InterlocutorAvatar: \"\" as string | null,\r\n    UserAvatar: \"\" as string | null,\r\n    NewMessagesCount: 0,\r\n    IsFetching: false as boolean\r\n}\r\n\r\nexport type DefaultDialogsStateType = typeof DefaultState\r\n\r\ntype TDialogsReducerActions = ReturnType<typeof  SetAllDialogs> | ReturnType<typeof SetNewMessages>\r\n    | ReturnType<typeof setInterlocutorAvatar> | ReturnType<typeof SetNewMessagesCount> | ReturnType<typeof SetNewMessagesCount>\r\n    | ReturnType<typeof setUserAvatarForDialogs> | ReturnType<typeof SetIsFetchingDialogs>\r\n\r\ntype TDialogsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TDialogsReducerActions>\r\n\r\nconst DialogsReducer = (state = DefaultState, action: TDialogsReducerActions): DefaultDialogsStateType => {\r\n    switch (action.type) {\r\n\r\n        case Set_All_Dialogs : {\r\n            return {...state, AllDialogs: action.NewAllDialogs}\r\n        }\r\n        case  Set_New_Messages : {\r\n            return {...state, DialogsMessages: action.NewMessagesData}\r\n        }\r\n        case Set_InterlocutorAvatar : {\r\n            return {\r\n                ...state, InterlocutorAvatar: action.newInterlocutorAvatar\r\n            }\r\n        }\r\n        case Set_UserAvatarForDialogs : {\r\n            return {\r\n                ...state, UserAvatar: action.UserAvatar\r\n            }\r\n        }\r\n        case Set_NewMessagesCount : {\r\n            return {\r\n                ...state, NewMessagesCount: action.NewMessagesCount\r\n            }\r\n        }\r\n        case Set_IsFetching : {\r\n            return {\r\n                ...state, IsFetching: action.IsFetching\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const SetAllDialogs = (NewAllDialogs: TDialogs) =>\r\n    ( {type: Set_All_Dialogs, NewAllDialogs} as const )\r\n\r\n\r\nexport const SetNewMessages = (NewMessagesData: TDialogMessages)  =>\r\n    ({type: Set_New_Messages, NewMessagesData}as const )\r\n\r\n\r\nexport const setInterlocutorAvatar = (newInterlocutorAvatar: string | null)  =>\r\n    ({type: Set_InterlocutorAvatar, newInterlocutorAvatar}as const )\r\n\r\n\r\nexport const SetNewMessagesCount = (NewMessagesCount: number) =>\r\n    ({type: Set_NewMessagesCount, NewMessagesCount}as const )\r\n\r\n\r\nexport const setUserAvatarForDialogs = (UserAvatar: string | null) =>\r\n    ({type: Set_UserAvatarForDialogs, UserAvatar}as const )\r\n\r\n\r\nexport const SetIsFetchingDialogs = (IsFetching: boolean) =>\r\n    ( {type: Set_IsFetching, IsFetching}as const )\r\n\r\n\r\nexport const GetAllDialogsThunk = (): TDialogsThunks => async (dispatch) => {\r\n    dispatch(SetIsFetchingDialogs(true))\r\n    const Dialogs = await API.GetAllDialogs()\r\n    dispatch(SetAllDialogs(Dialogs))\r\n    dispatch(SetIsFetchingDialogs(false))\r\n}\r\n\r\nexport const GetNewMessagesThunk = (DialoguserID: TDialoguserID): TDialogsThunks => async (dispatch) => {\r\n    dispatch(SetIsFetchingDialogs(true))\r\n    const DialogsMessagesInfo = await API.GetNewMessagesFromServer(DialoguserID)\r\n    dispatch(SetIsFetchingDialogs(false))\r\n    if (!DialogsMessagesInfo.error) {\r\n        dispatch(SetNewMessages(DialogsMessagesInfo))\r\n    }\r\n}\r\n\r\nexport const SendNewMessageThunk = (DialoguserID: TDialoguserID, NewMessage: string): TDialogsThunks => async (dispatch) => {\r\n    const SendNewMessageResult = await API.SendNewMessage(DialoguserID, NewMessage)\r\n    if (SendNewMessageResult.resultCode === 0) {\r\n        dispatch(GetNewMessagesThunk(DialoguserID))\r\n    }\r\n}\r\n\r\nexport const GetInterlocutorAvatarThunk = (DialoguserID: TDialoguserID): TDialogsThunks => async (dispatch) => {\r\n    const InterlocutorAvatarData = await API.getProfile(DialoguserID)\r\n    dispatch(setInterlocutorAvatar(InterlocutorAvatarData.photos.small))\r\n}\r\n\r\nexport const GetProfileAvatarThunk = (UserID: number | null): TDialogsThunks => async (dispatch) => {\r\n    const ProfileData = await API.getProfile(UserID)\r\n    dispatch(setUserAvatarForDialogs(ProfileData.photos.small))\r\n}\r\n\r\nexport const GetNewMessagesCountThunk = (): TDialogsThunks => async (dispatch) => {\r\n    const NewMessagesCount = await API.GetNewMessagesCount()\r\n    dispatch(SetNewMessagesCount(NewMessagesCount))\r\n}\r\n\r\nexport const DeleteMessageThunk = (MessageID: number, DialoguserID: TDialoguserID): TDialogsThunks => async (dispatch) => {\r\n    const DeleteMessageResult = await API.DeleteMessage(MessageID)\r\n    if (DeleteMessageResult.resultCode === 0) {\r\n        dispatch(GetNewMessagesThunk(DialoguserID))\r\n    }\r\n}\r\n\r\nexport default DialogsReducer\r\n","import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {TUsers, UserID} from \"../components/GlobalTypes/UsersTypes/UsersTypes\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\n\r\nconst follow = 'Users/FOLLOW'\r\nconst unfollow = 'Users/UNFOLLOW'\r\nconst setusers = 'Users/SET_USERS'\r\nconst Set_Current_Page = 'Users/SET_CURRENT_PAGE'\r\nconst Set_Total_Count_Of_Users = 'Users/Set_Total_Count_Of_Users'\r\nconst IsFetching_Toggle = 'Users/Toggle_is_fetching'\r\nconst IsInProcess_Togle = 'Users/IsInProcess_Togle'\r\nconst Portion_Size_Changer = 'Users/Portion_Size_Changer'\r\nconst Set_Founded_Users = 'Users/Set_Founded_Users'\r\nconst FindUserIsFetching_Toggle = 'Users/FindUserIsFetching_Toggle'\r\nconst Change_Page_Size = 'Users/ChangePageSize'\r\n\r\n\r\ntype OnFollowActionType = {\r\n    type: typeof follow\r\n    userID: UserID\r\n}\r\n\r\ntype onUnFollowActionType = {\r\n    type: typeof unfollow\r\n    userID: UserID\r\n}\r\n\r\ntype setUsersActionType = {\r\n    type: typeof setusers\r\n    users: Array<TUsers>\r\n}\r\n\r\ntype SetCurrentPageActionType = {\r\n    type: typeof Set_Current_Page\r\n    currentPage: number\r\n}\r\ntype SetTotalCountOfUsersActionType = {\r\n    type: typeof Set_Total_Count_Of_Users\r\n    totalUsersCount: number\r\n}\r\ntype ToggleIsFetchingActionType = {\r\n    type: typeof IsFetching_Toggle\r\n    IsFetching: boolean\r\n}\r\ntype ToggleFindUserIsFetchingActionType = {\r\n    type: typeof FindUserIsFetching_Toggle\r\n    FindUserIsFetching: boolean\r\n}\r\ntype ChangePortionSizeActionType = {\r\n    type: typeof Portion_Size_Changer\r\n    PortionSizeChangingValue: number\r\n}\r\n\r\ntype ToggleInProcessActionType = {\r\n    type: typeof IsInProcess_Togle\r\n    InProgress: boolean\r\n    UserID: UserID\r\n}\r\ntype SetFoundedUserActionType = {\r\n    type: typeof Set_Founded_Users\r\n    NewFoundedUsers:  Array<TUsers>\r\n}\r\n\r\ntype ChangePageSizeActionType = {\r\n    type: typeof Change_Page_Size\r\n    PageSize: number\r\n}\r\n\r\nlet DefaultState = {\r\n    Users: [] as Array<TUsers> | null,\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    IsFetching: false,\r\n    FindUserIsFetching: false,\r\n    InProcess: [] as Array<number>,\r\n    PortionSize: 1,\r\n    FoundedUsers: null as Array<TUsers>| null\r\n}\r\n\r\n\r\nexport type DefaultUsersState = typeof DefaultState\r\n\r\ntype TUsersActions =ReturnType<typeof OnFollow> | ReturnType<typeof onUnFollow>  | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof SetCurrentPage> | ReturnType<typeof SetTotalCountOfUsers> | ReturnType<typeof ToggleIsFetching>\r\n    | ReturnType<typeof ToggleFindUserIsFetching> | ReturnType<typeof ChangePortionSize>\r\n    | ReturnType<typeof ToggleInProcess>  | ReturnType<typeof SetFoundedUsers>  | ReturnType<typeof ChangePageSize>\r\n\r\n type TUsersThunks = ThunkAction<Promise<void>, GlobalState, unknown, TUsersActions>\r\n\r\nconst UsersReducer = (state = DefaultState, action: TUsersActions): DefaultUsersState => {\r\n    switch (action.type) {\r\n        case follow: {\r\n            return {\r\n                ...state,\r\n                Users: state.Users ? state.Users.map(us => {\r\n                        if (us.id === action.userID) {\r\n                            return {\r\n                                ...us,\r\n                                followed: true\r\n                            }\r\n                        }\r\n                        return us\r\n                    })\r\n                    : null\r\n            }\r\n        }\r\n        case unfollow: {\r\n            return {\r\n                ...state,\r\n                Users: state.Users ? state.Users.map(us => {\r\n                        if (us.id === action.userID) {\r\n                            return {\r\n                                ...us,\r\n                                followed: false\r\n                            }\r\n                        }\r\n                        return us\r\n                    })\r\n                    : null\r\n            }\r\n        }\r\n        case setusers: {\r\n            return {...state, Users: action.users}\r\n        }\r\n        case Set_Current_Page: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case Set_Total_Count_Of_Users: {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case IsFetching_Toggle: {\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        case IsInProcess_Togle: {\r\n            return {\r\n                ...state,\r\n                InProcess: action.InProgress ?\r\n                    [...state.InProcess, action.UserID]\r\n                    : state.InProcess.filter(id => id !== action.UserID)\r\n            }\r\n        }\r\n\r\n        case Portion_Size_Changer: {\r\n            return {...state, PortionSize: action.PortionSizeChangingValue}\r\n        }\r\n        case Set_Founded_Users: {\r\n            return {...state, FoundedUsers: action.NewFoundedUsers}\r\n        }\r\n        case FindUserIsFetching_Toggle: {\r\n            return {...state, FindUserIsFetching: action.FindUserIsFetching}\r\n        }\r\n        case Change_Page_Size: {\r\n            return {...state, pageSize: action.PageSize}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const ChangePageSize = (PageSize: number) =>\r\n    ({type: Change_Page_Size, PageSize} as const )\r\n\r\n\r\nexport const OnFollow = (userID: UserID) =>\r\n    ({type: follow, userID: userID}as const )\r\n\r\n\r\nexport const onUnFollow = (userID: UserID) =>\r\n    ({type: unfollow, userID: userID}as const )\r\n\r\n\r\nexport const setUsers = (users: Array<TUsers>) =>\r\n    ({type: setusers,  users}as const )\r\n\r\n\r\nexport const SetCurrentPage = (currentPage: number) =>\r\n    ({type: Set_Current_Page, currentPage: currentPage}as const )\r\n\r\n\r\nexport const SetTotalCountOfUsers = (totalCount: number)  =>\r\n    ({type: Set_Total_Count_Of_Users, totalUsersCount: totalCount}as const )\r\n\r\n\r\nexport const ToggleIsFetching = (IsFetching: boolean) =>\r\n    ({type: IsFetching_Toggle, IsFetching}as const )\r\n\r\n\r\nexport const ToggleFindUserIsFetching = (FindUserIsFetching: boolean) =>\r\n    ({type: FindUserIsFetching_Toggle, FindUserIsFetching}as const )\r\n\r\n\r\nexport const ToggleInProcess = (InProgress: boolean, UserID: UserID) =>\r\n    ({type: IsInProcess_Togle, InProgress, UserID}as const )\r\n\r\nexport const ChangePortionSize = (value: number) =>\r\n    ({type: Portion_Size_Changer, PortionSizeChangingValue: value}as const )\r\n\r\nexport const SetFoundedUsers = (NewFoundedUsers:  Array<TUsers>) =>\r\n    ({type: Set_Founded_Users, NewFoundedUsers}as const )\r\n\r\n\r\n\r\nexport const getUsersThunk = (currentPage: number, pageSize: number): TUsersThunks => async (dispatch) => {\r\n    dispatch(ToggleIsFetching(true))\r\n    const Users = await API.getUsers(currentPage, pageSize)\r\n    dispatch(ToggleIsFetching(false))\r\n    dispatch(setUsers(Users.items))\r\n    dispatch(SetTotalCountOfUsers(Users.totalCount))\r\n}\r\n\r\n\r\nexport const unfollowThunk = (userID: UserID): TUsersThunks => async (dispatch) => {\r\n    dispatch(ToggleInProcess(true, userID))\r\n    const DelSubResult = await API.DelSub(userID)\r\n    if (DelSubResult.resultCode === 0) {\r\n        dispatch(onUnFollow(userID))\r\n    }\r\n    dispatch(ToggleInProcess(false, userID))\r\n}\r\n\r\nexport const followThunk = (userID: UserID): TUsersThunks => async (dispatch) => {\r\n    dispatch(ToggleInProcess(true, userID))\r\n    const AddSubResult = await API.AddSub(userID)\r\n    if (AddSubResult.resultCode === 0) {\r\n        dispatch(OnFollow(userID))\r\n    }\r\n    dispatch(ToggleInProcess(false, userID))\r\n}\r\n\r\nexport const FindUserThunk = (UserName: string): TUsersThunks => async (dispatch) => {\r\n    dispatch(ToggleFindUserIsFetching(true))\r\n    const FoundedUsers = await API.FindUser(UserName)\r\n    dispatch(ToggleFindUserIsFetching(false))\r\n    if (!FoundedUsers.error) {\r\n        dispatch(SetFoundedUsers(FoundedUsers.items))\r\n    } else {\r\n        //@ts-ignore\r\n        dispatch(stopSubmit(\"FindUser\", {_error: FoundedUsers.error.messages[0]}))\r\n    }\r\n}\r\n\r\nexport default UsersReducer","import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\n\r\nconst SET_USER_DATA = 'Auth/SET_USER_DATA'\r\nconst IsFetching_Toggle = 'Auth/IsFetching_Toggle'\r\nconst Set_Captcha_Url = 'Auth/Set_Captcha_Url'\r\n\r\ntype TAuthThunks = ThunkAction<Promise<void>, GlobalState, unknown, TAuthReducerActions>\r\n\r\n\r\nlet DefaultState = {\r\n    IsLogined: false,\r\n    IsFetching: false,\r\n    CaptchaUrl: null as string | null,\r\n    userId: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null\r\n\r\n}\r\n\r\ntype DefaultAuthState = typeof DefaultState\r\n\r\ntype TAuthReducerActions = ReturnType<typeof SetAuthUser> | ReturnType<typeof ToggleIsFetching> | ReturnType<typeof SetCaptchaUrl>\r\nconst AuthReducer = (state: DefaultAuthState = DefaultState, action: TAuthReducerActions): DefaultAuthState => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA : {\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        }\r\n        case IsFetching_Toggle: {\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        case Set_Captcha_Url: {\r\n            return {...state, CaptchaUrl: action.CaptchaURL}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetAuthUser = (userId: number | null, email: string | null, login: string | null, IsLogined: boolean)  =>\r\n    ({type: SET_USER_DATA, data: {userId, email, login, IsLogined} } as const)\r\n\r\nexport const ToggleIsFetching = (IsFetching: boolean)  =>\r\n    ({type: IsFetching_Toggle, IsFetching} as const)\r\n\r\nexport const SetCaptchaUrl = (CaptchaURL: string)  =>\r\n    ({type: Set_Captcha_Url, CaptchaURL} as const)\r\n\r\n\r\nexport const AuthMeThunk = (): TAuthThunks =>\r\n    async (dispatch) => {\r\n        ToggleIsFetching(true)\r\n        const AuthInfo = await API.AuthMe() //возвращает данные авторизованного юзера\r\n        dispatch(ToggleIsFetching(false))\r\n        if (AuthInfo.resultCode === 0) {\r\n            let {id, login, email} = AuthInfo.data\r\n            dispatch(SetAuthUser(id, email, login, true))\r\n        }\r\n    }\r\n\r\n\r\nexport const LoginThunk = (email: string, password: string, rememberMe: boolean, captcha?: string | null): TAuthThunks =>\r\n    async (dispatch) => {\r\n        const LoginInfo = await API.Login(email, password, rememberMe, captcha)\r\n        if (LoginInfo.resultCode === 0) {\r\n            dispatch(AuthMeThunk())\r\n        } else {\r\n            if (LoginInfo.resultCode === 10) {\r\n                dispatch(GetCaptchaThunk())\r\n            }\r\n          //@ts-ignore\r\n            dispatch(stopSubmit(\"login\", {_error: LoginInfo.messages[0]}))\r\n        }\r\n    }\r\n\r\nexport const LogOutThunk = (): TAuthThunks => async (dispatch) => {\r\n    const LogOutInfo = await API.LogOut()\r\n    if (LogOutInfo.resultCode === 0) {\r\n        dispatch(SetAuthUser(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const GetCaptchaThunk = (): TAuthThunks => async (dispatch) => {\r\n    const captchaURL = await API.GetCaptchaFromServer()\r\n    dispatch(SetCaptchaUrl(captchaURL))\r\n}\r\n\r\nexport default AuthReducer","import {AuthMeThunk} from \"./AuthReducer\"\r\nimport {GetProfileThunk} from \"./ProfileReduser\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\nconst INITIALIZATED = 'Init/INITIALIZATED'\r\n\r\nlet DefaultState = {inition: false}\r\n\r\ntype  DefaultInitializatedState = typeof DefaultState\r\n\r\ntype initializatingActionType = {\r\n    type: typeof INITIALIZATED\r\n}\r\n\r\ntype TInitializateReducerActions = initializatingActionType\r\n\r\ntype TInitializationThunks = ThunkAction<Promise<void>, GlobalState, unknown, TInitializateReducerActions>\r\n\r\nconst InitializateReducer = (state = DefaultState, action : TInitializateReducerActions): DefaultInitializatedState => {\r\n    switch (action.type) {\r\n        case INITIALIZATED : {\r\n            return {\r\n                ...state,\r\n                inition: true\r\n        }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const initializating = () : initializatingActionType => ({type: INITIALIZATED})\r\n\r\n\r\nexport const InitializationAPPthunk = () : TInitializationThunks => async (dispatch , getState ) => {\r\n\r\n    let promise = dispatch(AuthMeThunk())\r\n    await Promise.all([promise]);\r\n    const MyId = getState().Auth.userId\r\n    if (MyId) {\r\n        dispatch(GetProfileThunk(MyId))\r\n    }\r\n    dispatch(initializating())\r\n}\r\n\r\nexport default InitializateReducer","import {API} from \"../API/requests\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {\r\n    ToDoListTaskStatusType, TTask,\r\n    TToDoList,\r\n} from \"../components/GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {GlobalState} from \"./redux-store\";\r\n\r\n\r\nconst SET_TO_DO_LISTS = 'ToDoLists/SET_TO_DO_LISTS';\r\nconst SET_TO_DO_LIST_TASKS_Page = 'ToDoLists/SET_TO_DO_LIST_TASKS_Page';\r\nconst SET_TO_DO_LISTS_TASKS_Count = 'ToDoLists/SET_TO_DO_LISTS_TASKS_Count';\r\nconst SET_TO_DO_LIST_TASKS = 'ToDoLists/SET_TO_DO_LIST_TASKS';\r\nconst IsFetching_Toggle = 'ToDoLists/IsFetching_Toggle';\r\nconst TaskIsFetching_Toggle = 'ToDoLists/TaskIsFetching_Toggle';\r\n\r\n\r\nlet DefaultState = {\r\n    ToDoLists: [] as Array<TToDoList>,\r\n    ToDoListTasks: null as  Array<TTask> | null,\r\n    ToDoListTasksPage: 1,\r\n    ToDoListTasksCount: 10,\r\n    IsFetching: false,\r\n    TaskIsFetching: false\r\n}\r\n\r\ntype TToDoListsActions =ReturnType<typeof SetToDoLists>  | ReturnType<typeof SetToDoListTasksPage >\r\n    |ReturnType<typeof SetToDoListTasksCount > | ReturnType<typeof SetToDoListTasks> | ReturnType<typeof ToggleIsFetching>\r\n    | ReturnType<typeof SetTaskIsFetching>\r\n\r\ntype TToDoListsThunks = ThunkAction<Promise<void>, GlobalState, unknown, TToDoListsActions>\r\n\r\nexport  type  DefaultToDoListStateType = typeof DefaultState\r\n\r\nconst ToDoListsReducer = (state = DefaultState, action: TToDoListsActions): DefaultToDoListStateType => {\r\n    switch (action.type) {\r\n        case SET_TO_DO_LISTS: {\r\n            return {...state, ToDoLists: action.NewToDoLists}\r\n        }\r\n        case SET_TO_DO_LIST_TASKS_Page: {\r\n            return {...state, ToDoListTasksPage: action.NewToDoListTasksPage}\r\n        }\r\n        case SET_TO_DO_LISTS_TASKS_Count: {\r\n            return {...state, ToDoListTasksCount: action.NewToDoListTasksCount}\r\n        }\r\n        case SET_TO_DO_LIST_TASKS: {\r\n            return {...state, ToDoListTasks: action.Tasks}\r\n        }\r\n\r\n        case IsFetching_Toggle: {\r\n            return {...state, IsFetching: action.IsFetching}\r\n        }\r\n        case TaskIsFetching_Toggle: {\r\n            return {...state, TaskIsFetching: action.TaskIsFetching}\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const SetToDoLists = (NewToDoLists: Array<TToDoList>)  =>\r\n    ({type: SET_TO_DO_LISTS, NewToDoLists} as const )\r\n\r\nexport const SetToDoListTasksPage = (NewToDoListTasksPage: number) =>\r\n    ( {type: SET_TO_DO_LIST_TASKS_Page, NewToDoListTasksPage}as const )\r\n\r\nexport const SetToDoListTasksCount = (NewToDoListTasksCount: number)  =>\r\n    ({type: SET_TO_DO_LISTS_TASKS_Count, NewToDoListTasksCount}as const )\r\n\r\nexport const SetToDoListTasks = (Tasks: Array<TTask>)  =>\r\n    ({type: SET_TO_DO_LIST_TASKS, Tasks} as const)\r\n\r\nexport const ToggleIsFetching = (IsFetching: boolean)  =>\r\n    ({type: IsFetching_Toggle, IsFetching}as const )\r\n\r\nexport const SetTaskIsFetching = (TaskIsFetching: boolean) =>\r\n    ({type: TaskIsFetching_Toggle, TaskIsFetching}as const )\r\n\r\n\r\n\r\nexport const GetToDoListsThunk = (): TToDoListsThunks => async (dispatch) => {\r\n    dispatch(ToggleIsFetching(true))\r\n    const ToDoLists = await API.GetToDoLists()\r\n    dispatch(SetToDoLists(ToDoLists))\r\n    dispatch(ToggleIsFetching(false))\r\n}\r\n\r\nexport const AddNewToDoListsThunk = (title: string): TToDoListsThunks => async (dispatch) => {\r\n    const CreateNewToDoListResult = await API.CreateNewToDoList(title)\r\n    if(CreateNewToDoListResult.resultCode === 0)\r\n    {\r\n        dispatch(GetToDoListsThunk())\r\n    }\r\n}\r\n\r\nexport const DeleteToDoListThunk = (ToDoListID: string): TToDoListsThunks => async (dispatch) => {\r\n    const DeleteToDoListResult = await API.DeleteToDoList(ToDoListID)\r\n    if(DeleteToDoListResult.resultCode === 0)\r\n    {\r\n        dispatch(GetToDoListsThunk())\r\n    }\r\n}\r\n\r\nexport const ChangeToDoListTitleThunk = (ToDoListID: string, Newtitle: string): TToDoListsThunks => async (dispatch) => {\r\n    const ChangeToDoListTitleResult  =  await API.ChangeToDoListTitle(ToDoListID, Newtitle)\r\n    if(ChangeToDoListTitleResult.resultCode === 0)\r\n    {\r\n        dispatch(GetToDoListsThunk())\r\n    }\r\n}\r\n\r\nexport const GetToDoListTasksThunk = (ToDoListID: string, count?: number, page?: number): TToDoListsThunks => async (dispatch) => {\r\n    dispatch(SetTaskIsFetching(true))\r\n    const ToDoListTasks = await API.GetToDoListTasks(ToDoListID, count, page)\r\n    dispatch(SetTaskIsFetching(false))\r\n    if (!ToDoListTasks.error) {\r\n        dispatch(SetToDoListTasks(ToDoListTasks.items))\r\n    }\r\n}\r\n\r\nexport const AddNewTaskThunk = (ToDoListID: string, TaskTitle: string): TToDoListsThunks => async (dispatch) => {\r\n    const CreateNewTaskForToDoListResult = await API.CreateNewTaskForToDoList(ToDoListID, TaskTitle)\r\n    if (CreateNewTaskForToDoListResult.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n    }\r\n}\r\n\r\nexport const DeleteTaskThunk = (ToDoListID: string, TaskId: string): TToDoListsThunks => async (dispatch) => {\r\n    const DeleteTaskFromToDoListResult = await API.DeleteTaskFromToDoList(ToDoListID, TaskId)\r\n    if (DeleteTaskFromToDoListResult.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n\r\n    }\r\n}\r\n\r\nexport const UpdateTaskInformationThunk = (ToDoListID: string, TaskId: string, status: ToDoListTaskStatusType): TToDoListsThunks => async (dispatch) => {\r\n    const ChangeTaskInformationResult = await API.ChangeTaskInformation(ToDoListID, TaskId, status)\r\n    if (ChangeTaskInformationResult.resultCode === 0) {\r\n        dispatch(GetToDoListTasksThunk(ToDoListID))\r\n        //@ts-ignore\r\n    } else dispatch(stopSubmit(\"TaskEditorForm\", {_error: ChangeTaskInformationResult.messages[0]}))\r\n}\r\n\r\nexport default ToDoListsReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport ProfileReducer from \"./ProfileReduser\"\r\nimport DialogsReducer from \"./DIalogsReduser\"\r\nimport UsersReducer from \"./UsersReduser\"\r\nimport AuthReducer from \"./AuthReducer\"\r\nimport  thunkMiddleWare from \"redux-thunk\"\r\nimport {reducer as formReducer} from \"redux-form\"\r\nimport InitializateReducer from \"./InitializatonReducer\"\r\nimport ToDoListsReducer from \"./ToDoListsReducer\"\r\n\r\nlet reducers = combineReducers({\r\n    ProfileData: ProfileReducer,\r\n    MessagesData: DialogsReducer,\r\n    UsersData : UsersReducer,\r\n    Auth : AuthReducer,\r\n    form : formReducer,\r\n    Init :  InitializateReducer,\r\n    ToDoListsData : ToDoListsReducer\r\n})\r\n\r\ntype Treducers = typeof reducers\r\n\r\nexport type GlobalState = ReturnType<Treducers>\r\n\r\nconst store = createStore(reducers,applyMiddleware(thunkMiddleWare))\r\n//@ts-ignore\r\nwindow.store = store\r\nexport default store\r\n","import React from 'react';\r\nimport HS from \"./Header.module.css\"\r\nimport {TLogOutButtonProps} from \"../GlobalTypes/HeaderTypes/HeaderTypes\";\r\n\r\n\r\n\r\nconst LogOutButton : React.FC<TLogOutButtonProps> =(props) =>{\r\n    const LogOut = ()=>{\r\n        props.LogOutThunk()\r\n        props.handleMenuClose()\r\n    }\r\n\r\nreturn <div>\r\n    <div className={HS.LogOutStyle} onClick={LogOut}>\r\n        Logout\r\n    </div>\r\n</div>\r\n}\r\n\r\nexport default LogOutButton","import React, {ChangeEvent, SetStateAction, useState} from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport AccountCircleHeader from '@material-ui/icons/AccountCircle';\r\nimport hs from \"./Header.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport LogOutButton from \"./LogOutButton\";\r\nimport {TAccountIconComponentProps} from \"../GlobalTypes/HeaderTypes/HeaderTypes\";\r\n\r\n\r\nconst AccountIconComponent  : React.FC<TAccountIconComponentProps>= (props) => {\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const isMenuOpen = Boolean(anchorEl);\r\n\r\n    const handleProfileMenuOpen = (event : any) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const menuId = 'primary-search-account-menu';\r\n    const renderMenu = (\r\n        <Menu\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <div className={hs.accountIconUserName}>\r\n                    {props.OwnName && props.OwnName}\r\n            </div>\r\n\r\n            <div className={`${hs.item} ${hs.active}`}>\r\n            <NavLink to=\"/Profile/\">\r\n            <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\r\n            </NavLink>\r\n            </div>\r\n            <MenuItem onClick={handleMenuClose}>\r\n                     My account\r\n            </MenuItem>\r\n\r\n            <MenuItem >\r\n                <LogOutButton\r\n                    handleMenuClose={handleMenuClose}\r\n                    LogOutThunk={props.LogOutThunk}\r\n                />\r\n            </MenuItem>\r\n        </Menu>\r\n    );\r\n\r\n\r\n    return <div>\r\n            <IconButton\r\n                edge=\"end\"\r\n                aria-label=\"account of current user\"\r\n                aria-controls={menuId}\r\n                aria-haspopup=\"true\"\r\n                onClick={handleProfileMenuOpen}\r\n                color=\"inherit\"\r\n            >\r\n                <AccountCircleHeader />\r\n            </IconButton>\r\n                {renderMenu}\r\n\r\n\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default AccountIconComponent;\r\n","import React from \"react\"\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Badge from \"@material-ui/core/Badge/Badge\";\r\nimport MailIconHeader from '@material-ui/icons/Mail';\r\n\r\ntype TMessagesIconProps = {\r\n    NewMessagesCount : number\r\n}\r\n\r\nconst MessagesIcon : React.FC<TMessagesIconProps> = (props) =>{\r\n\r\n    return  <div>\r\n        <div >\r\n            <IconButton color=\"inherit\">\r\n                <Badge\r\n                    badgeContent={props.NewMessagesCount.toString()}\r\n                    color=\"secondary\">\r\n                    <MailIconHeader />\r\n                </Badge>\r\n            </IconButton></div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default MessagesIcon","import React from \"react\"\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport UsersIcon from '@material-ui/icons/People';\r\n\r\n\r\n\r\nconst MessagesIcon : React.FC= () =>{\r\n    return <div>\r\n        <div >\r\n            <IconButton  color=\"inherit\">\r\n                    <UsersIcon />\r\n            </IconButton>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default MessagesIcon","import React from \"react\"\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ListIcon from '@material-ui/icons/ListAlt';\r\n\r\n\r\n\r\nconst ToDoListsIcon : React.FC = () =>{\r\n    return <div>\r\n        <div >\r\n            <IconButton  color=\"inherit\">\r\n                <ListIcon />\r\n            </IconButton>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ToDoListsIcon","import React,{useEffect,useState} from 'react';\r\nimport hc from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport AccountIconComponent from \"./AcountIcon\";\r\nimport MessagesIcon from \"./MessagesIcon\";\r\nimport UsersIcon from \"./UsersIcon\"\r\nimport ToDoListsIcon from \"./ToDoListsIcon\";\r\nimport {THeaderContainerProps} from \"./HeaderContainer\";\r\n\r\nconst Header : React.FC<THeaderContainerProps> = (props) => {\r\n\r\nlet [NMC,SetNMC] = useState(props.NewMessagesCount)\r\n\r\n    useEffect(() => {\r\n        SetNMC(props.NewMessagesCount)\r\n        }, [props.NewMessagesCount]\r\n    )\r\n\r\n    return <header className={hc.header}>\r\n        <div className={hc.item}>\r\n            {props.IsLogined\r\n                ?\r\n                <div className={hc.IconsWrapper}>\r\n\r\n                    <div className={hc.startPosition}>\r\n\r\n                    </div>\r\n                    <div className={`${hc.item} ${hc.active}`}>\r\n                        <NavLink activeClassName={hc.active} to={\"/ToDoLists/\"}>\r\n                            <ToDoListsIcon/>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div className={`${hc.item} ${hc.active}`}>\r\n                        <NavLink activeClassName={hc.active} to={\"/Users/\"}>\r\n                            <UsersIcon/>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div className={hc.MessagesIconPosition}>\r\n                        <div className={`${hc.item} ${hc.active}`}>\r\n                            <NavLink activeClassName={hc.active} to={\"/Dialogs/\"}>\r\n                                <MessagesIcon NewMessagesCount={NMC}/>\r\n                            </NavLink>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <AccountIconComponent LogOutThunk={props.LogOutThunk}\r\n                                          OwnName={props.OwnName}\r\n                    />\r\n                </div>\r\n                :\r\n                <div className={hc.unloginedHeader}>\r\n                    <div className={hc.unloginedUsersIcon}>\r\n                    <div className={`${hc.item} ${hc.active}`}>\r\n                        <NavLink activeClassName={hc.active} to={\"/Users/\"}>\r\n                            <UsersIcon/>\r\n                        </NavLink>\r\n                    </div>\r\n                    </div>\r\n\r\n                     <div className={hc.loginPosition}>\r\n                        <NavLink className={hc.loginButton} to={'/login'}>\r\n                            Login\r\n                        </NavLink>\r\n                     </div>\r\n\r\n                 </div>\r\n            }\r\n        </div>\r\n    </header>\r\n}\r\nexport default Header;\r\n","import React from 'react'\r\nimport LoadingSvg from '../../../assetss/images/loader1.gif';\r\nimport ls from './LoaderStyles.module.css'\r\n\r\n\r\n\r\nlet Preloader : React.FC<{}> = (props ) =>{\r\n\r\n    return <img className={ls.large} src={LoadingSvg}/>\r\n}\r\nexport default Preloader","import {GlobalState} from \"./redux-store\";\r\n\r\nexport const GetProfileSelector = (state : GlobalState) =>{\r\n    return state.ProfileData.profile\r\n}\r\nexport const GetStatusSelector = (state : GlobalState) =>{\r\n    return state.ProfileData.status\r\n}\r\nexport const GetIsMyPageSelector = (state : GlobalState) =>{\r\n    return state.ProfileData.IsMyPage\r\n}\r\nexport const GetPostsSelector = (state : GlobalState) =>{\r\n    return state.ProfileData.Posts\r\n}\r\nexport const GetOwnNameSelector = (state : GlobalState) =>{\r\n    return state.ProfileData.OwnName\r\n}\r\nexport const GetProfileIsFetching = (state : GlobalState) =>{\r\n    return state.ProfileData.IsFetching\r\n}\r\n\r\n","import {GlobalState} from \"./redux-store\";\r\n\r\nexport const GetUserIDSelector = (state : GlobalState) =>{\r\n    return state.Auth.userId\r\n}\r\nexport const GetIsLoginedSelector = (state : GlobalState) => {\r\n    return state.Auth.IsLogined\r\n}\r\nexport const GetLoginSelector = (state : GlobalState) => {\r\n    return state.Auth.login\r\n}\r\nexport const GetIsFetchingSelector = (state : GlobalState) => {\r\n    return state.Auth.IsFetching\r\n}","import {GlobalState} from \"./redux-store\";\r\n\r\nexport const GetinitionSelector = (state : GlobalState) =>{\r\n    return state.Init.inition\r\n}\r\nexport const GetNewMessagesCountSelector = (state : GlobalState) =>{\r\n    return state.MessagesData.NewMessagesCount\r\n}\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\nimport {connect} from \"react-redux\";\r\nimport {LogOutThunk} from \"../../data/AuthReducer\";\r\nimport {GetOwnNameSelector, GetProfileSelector} from \"../../data/ProfileSelectors\";\r\nimport {GetNewMessagesCountThunk} from \"../../data/DIalogsReduser\"\r\nimport {\r\n    GetIsFetchingSelector,\r\n    GetIsLoginedSelector,\r\n    GetLoginSelector,\r\n    GetUserIDSelector\r\n} from \"../../data/AuthSelectors\";\r\nimport {GetNewMessagesCountSelector} from \"../../data/InitialozationSelectors\";\r\nimport {GlobalState} from \"../../data/redux-store\";\r\nimport {\r\n    T_MDTP_HeaderContainer,\r\n    T_MSTP_HeaderContainer,\r\n    THeaderContainerOwnProps\r\n} from \"../GlobalTypes/HeaderTypes/HeaderTypes\";\r\n\r\nexport type THeaderContainerProps = T_MSTP_HeaderContainer & T_MDTP_HeaderContainer & THeaderContainerOwnProps\r\n\r\nclass HeaderContainer extends React.Component<THeaderContainerProps> {\r\n    componentDidMount() {\r\n        if(this.props.IsLogined){\r\n            this.props.GetNewMessagesCountThunk()\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps : THeaderContainerProps, prevState : {}) {\r\n\r\n        if(this.props.IsLogined !== prevProps.IsLogined ){\r\n            this.props.GetNewMessagesCountThunk()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return <>\r\n        {this.props.IsFetching ? <Preloader/> :null}\r\n          <Header {...this.props} />\r\n          </>\r\n    }\r\n\r\n}\r\nlet MapStateToProps = (state : GlobalState) : T_MSTP_HeaderContainer  => ({\r\n    IsFetching : GetIsFetchingSelector(state),\r\n    IsLogined: GetIsLoginedSelector(state),\r\n    login:GetLoginSelector(state),\r\n    UserProfile: GetProfileSelector(state),\r\n    OwnID : GetUserIDSelector(state),\r\n    OwnName : GetOwnNameSelector(state),\r\n    NewMessagesCount : GetNewMessagesCountSelector(state)\r\n})\r\n\r\nexport default connect<T_MSTP_HeaderContainer,T_MDTP_HeaderContainer,THeaderContainerOwnProps, GlobalState>(MapStateToProps,\r\n    {LogOutThunk,GetNewMessagesCountThunk}) (HeaderContainer);\r\n","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport d from \"./Dialogs.module.css\";\r\nimport UserPhoto from \"./../assetss/images/userPhoto.jpg\"\r\nimport pc from \"../Profile/UserInfo/UserInfo.module.css\";\r\nimport {TDialogInfoProps} from \"../GlobalTypes/DialogsTypes/DialogsTypes\"\r\n\r\n\r\nconst DialogInfo : React.FC<TDialogInfoProps>= (props ) => {\r\n\r\n    const date = props.MessageSendTime.split(\"T\")[0]\r\n    const time = props.MessageSendTime.split(\"T\")[1].split(\".\")[0]\r\n\r\n\r\n\r\n\r\n    return <div className={d.DialogArea}>\r\n        <div className={`${d.item} ${d.active}`}>\r\n            <NavLink to={`/messages/${props.UserID}`}>\r\n                <div className={d.Main}>\r\n                    <div className={pc.UserName}>\r\n                        {props.DialogUserName}\r\n                        <div>\r\n                            <NavLink to={'/Profile/' + props.UserID}>\r\n                                <img className={d.DialogUserPhoto}\r\n\r\n                                     src={\r\n                                         props.DialogUserAvatar.small\r\n                                             ?\r\n                                             props.DialogUserAvatar.small\r\n                                             : props.DialogUserAvatar.large ? props.DialogUserAvatar.large\r\n                                             : UserPhoto\r\n                                     }/>\r\n                            </NavLink>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={d.padding}>\r\n                        {props.NewMessagesCount !== 0 ?\r\n                            \"you have a \" + props.NewMessagesCount + \" new messages\"\r\n                            : \"you don't have a new messages\"}\r\n                    </div>\r\n                    <div className={d.padding}>\r\n                        {\r\n                            props.MessageSendTime ?\r\n                                <div>\r\n                                    last message was :\r\n                                    <div>\r\n                                        {date}\r\n                                    </div>\r\n                                    <div>\r\n                                        {time}\r\n                                    </div>\r\n                                </div>\r\n                                : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    </div>\r\n}\r\nexport default DialogInfo;","import React from 'react'\r\nimport DialogInfo from \"./DialogInfo\";\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\nimport {TDialogsProps} from \"../GlobalTypes/DialogsTypes/DialogsTypes\";\r\n\r\n\r\nconst Dialogs : React.FC<TDialogsProps> = (props) => {\r\n\r\n    return (<div>\r\n            <>\r\n                {props.IsFetching ? <Preloader/> :\r\n                    props.AllDialogs &&\r\n                    props.AllDialogs.map(el => {\r\n                        return <DialogInfo key={el.id} DialogUserName={el.userName}\r\n                                           DialogUserAvatar={el.photos}\r\n                                           NewMessagesCount={el.newMessagesCount}\r\n                                           MessageSendTime={el.lastDialogActivityDate}\r\n                                           UserID={el.id}\r\n                        />\r\n                    })\r\n                }`\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs","import React from \"react\"\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet MapStateToPropsForRedirect = (state)=>{\r\n    return{\r\n        IsLogined : state.Auth.IsLogined\r\n    }\r\n}\r\n\r\nexport const AuthRedirect = (Component) =>{\r\nclass RedirectComp extends React.Component {\r\n    render() {\r\n        if (!this.props.IsLogined) {\r\n            // редирект на страничку авторизации\r\n            return <Redirect to={\"/Login\"} />\r\n        }\r\n        return <Component {...this.props} />\r\n    }\r\n}\r\nlet ConectedAuthRedirectComp = connect(MapStateToPropsForRedirect)(RedirectComp)\r\nreturn ConectedAuthRedirectComp\r\n}","import {GlobalState} from \"./redux-store\";\r\n\r\nexport const GetAllDialogsSelector = (state : GlobalState) =>{\r\n    return state.MessagesData.AllDialogs\r\n}\r\n\r\nexport const GetMessagesDataSelector = (state : GlobalState) =>{\r\n    return state.MessagesData\r\n}\r\n\r\nexport const GetIsFetchingDialogs = (state : GlobalState) =>{\r\n    return state.MessagesData.IsFetching\r\n\r\n}\r\n\r\nexport const GetDialogsMessagesSelector = (state : GlobalState) =>{\r\n    return state.MessagesData.DialogsMessages\r\n}\r\nexport const GetUserAvatarSelector = (state : GlobalState) =>{\r\n    return state.MessagesData.UserAvatar\r\n}\r\nexport const GetinterlocutorAvatarSelector = (state : GlobalState) =>{\r\n    return state.MessagesData.InterlocutorAvatar\r\n}\r\n\r\n","import React from 'react'\r\nimport {GetAllDialogsThunk} from \"../../data/DIalogsReduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AuthRedirect} from \"../hocs/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {GetAllDialogsSelector, GetIsFetchingDialogs} from \"../../data/DialogsSelectors\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport {T_MDTP_DialogsContainer,T_MSTP_DialogsContainer, TDialogsContainerOwnProps} from \"../GlobalTypes/DialogsTypes/DialogsTypes\";\r\nimport {GlobalState} from \"../../data/redux-store\";\r\n\r\ntype TDialogsContainerProps = T_MDTP_DialogsContainer & T_MSTP_DialogsContainer & TDialogsContainerOwnProps\r\n\r\nclass DialogsContainer extends React.Component<TDialogsContainerProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.GetAllDialogsThunk()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dialogs AllDialogs={this.props.AllDialogs} IsFetching={this.props.IsFetching}/>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet StateToProps = (state: GlobalState): T_MSTP_DialogsContainer => ({\r\n    AllDialogs: GetAllDialogsSelector(state),\r\n    IsFetching: GetIsFetchingDialogs(state)\r\n})\r\n\r\nexport default compose(connect<T_MSTP_DialogsContainer,T_MDTP_DialogsContainer,TDialogsContainerOwnProps, GlobalState>\r\n(StateToProps, {GetAllDialogsThunk}), AuthRedirect, withRouter)(DialogsContainer)","import PS from \"./Paginator.module.css\";\r\nimport React, {useState} from \"react\"\r\nimport {TPaginatorProps} from \"../../../GlobalTypes/assets/PaginatorTypes\";\r\n\r\nconst Paginator : React.FC<TPaginatorProps> = (props) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize) // расчет кол-ва страниц\r\n    let pages : Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let [PortionNumber, SetPortionNumber] = useState(1)\r\n    let LeftBorderOfPortion = (PortionNumber - 1) * props.PortionSize + 1\r\n    let RightBorderOfPortion = PortionNumber * props.PortionSize\r\n    let PortionCount = Math.ceil(pagesCount / props.PortionSize) // расчет кол-ва порций\r\n\r\n    return <div className={PS.setNumbers}>\r\n        <div className={PS.NumbersFont}>\r\n        {PortionNumber > 1 &&\r\n        <button className={PS.button} onClick={() => {\r\n            SetPortionNumber(PortionNumber - 1)\r\n        }}> back </button>}\r\n        {pages.filter(p => p >= LeftBorderOfPortion && p <= RightBorderOfPortion).map((p) => {\r\n            // нумерация страниц\r\n            return (\r\n\r\n                <span  className={props.currentPage === p ?  PS.numbers : undefined }\r\n                      onClick={(ev) => {\r\n                          props.OnChangedPage(p)\r\n                      }}>\r\n                            {\"    \" + p}\r\n                        </span>\r\n\r\n            )\r\n        })}\r\n        &nbsp;&nbsp;\r\n        {PortionCount > PortionNumber &&\r\n\r\n        <button className={PS.button} onClick={() => {\r\n            SetPortionNumber(PortionNumber + 1)\r\n        }}>next </button>}\r\n    </div>\r\n    </div>\r\n}\r\n\r\nexport default Paginator","import React from 'react'\r\nimport um from \"./Users.module.css\";\r\nimport UserPhoto from \"../assetss/images/userPhoto.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport pc from \"../Profile/UserInfo/UserInfo.module.css\";\r\nimport {TUserProps} from \"../GlobalTypes/UsersTypes/UsersTypes\";\r\n\r\n\r\nlet User : React.FC<TUserProps> = (props) => {\r\n\r\n    return <div className={um.Main}>\r\n        <div>\r\n\r\n            <NavLink to={'/Profile/' + props.user.id}>\r\n                <img  className={um.img} src={props.user.photos.small ? props.user.photos.small : UserPhoto}/>\r\n            </NavLink>\r\n            <div  className={pc.UserName}>\r\n                {props.user.name}\r\n            </div>\r\n            { props.IsLogined &&\r\n            <div>\r\n\r\n                { props.user.followed\r\n                        ? <button disabled={props.InProcess.some(id =>  id === props.user.id)}\r\n                                  onClick={() => {\r\n                                      props.OnUnFollow(props.user.id)\r\n                                  }} className={um.unfollow}>\r\n                            unfollow\r\n                        </button>\r\n\r\n\r\n                        : <button disabled={props.InProcess.some(id => id === props.user.id)}\r\n                                  onClick={() => {\r\n                                      props.OnFollow(props.user.id)\r\n                                  }} className={um.follow}>\r\n                            follow\r\n                        </button>\r\n                }\r\n            </div>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\nexport default User","import React,{useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {TFindUserModalProps} from \"../../GlobalTypes/UsersTypes/UsersTypes\";\r\n\r\n const  FindUserModal : React.FC<TFindUserModalProps> = (props)=> {\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Button  variant=\"contained\" color=\"primary\" onClick={handleClickOpen}>\r\n                Search user\r\n            </Button>\r\n            <Dialog    open={open} onClose={handleClose} >\r\n                <DialogTitle >Search user by name</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                       enter user name with you looking for\r\n                    </DialogContentText>\r\n                    <TextField\r\n                        onChange={props.OnFindUserFieldValueChanging}\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"FindingUserName\"\r\n                        type=\"userName\"\r\n                        fullWidth\r\n                        name=\"finduser\"\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Go back\r\n                    </Button>\r\n                    <Button onClick={props.SubmitModal} color=\"primary\">\r\n                        Search\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\nexport default FindUserModal","import React, {useEffect, useState} from \"react\"\r\nimport FUStyles from \"./FindUser.module.css\";\r\nimport User from \"./User\";\r\nimport FindUserModal from \"../MaterialUI/ModalWindow/UserSearchModal\";\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\nimport {TFindUserProps} from \"../GlobalTypes/UsersTypes/UsersTypes\";\r\n\r\n\r\nconst FindUser : React.FC<TFindUserProps> = (props) => {\r\n    let [FoundedUsers, SetFoundedUsers] = useState(props.FoundedUsers)\r\n    let[FindUserFieldValue,SetFindUserFieldValue] = useState<string>(\"\");\r\n\r\n    const OnFindUserFieldValueChanging = (el : React.ChangeEvent<HTMLInputElement>) =>{\r\n        SetFindUserFieldValue(el.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n            SetFoundedUsers(props.FoundedUsers)\r\n        }, [props.FoundedUsers]\r\n    )\r\n\r\n    let [FoundingMode, SetFoundingMode] = useState(false)\r\n\r\n    const FoundingModeON = () => {\r\n        SetFoundingMode(true)\r\n\r\n    }\r\n    const FoundingModeOFF = () => {\r\n        SetFoundingMode(false)\r\n    }\r\n\r\n\r\n    const FindUser = () => {\r\n        props.FindUserThunk(FindUserFieldValue)\r\n        FoundingModeON()\r\n    }\r\n\r\n\r\n    return <div>\r\n        {!FoundingMode ?\r\n            <div className={FUStyles.FindUserButton}>\r\n                <FindUserModal SubmitModal={FindUser}\r\n                               OnFindUserFieldValueChanging={OnFindUserFieldValueChanging}/>\r\n            </div>\r\n\r\n            :\r\n            <div>\r\n                {props.FindUserIsFetching ? <Preloader />\r\n                : <div>\r\n                    <div className={FUStyles.foundArea}>\r\n                    {FoundedUsers &&\r\n                    <div>\r\n                        <h2 className={FUStyles.SearchingResult}>\r\n                            Searching result :\r\n                            <div>\r\n\r\n                                {FoundedUsers && FoundedUsers.length === 0 ?\r\n                                    \"no one user with this name\"\r\n                                    : \"founded \" + FoundedUsers.length + \" users \"}\r\n\r\n                            </div>\r\n                        </h2>\r\n\r\n                        <div className={FUStyles.FoundedUsers}>\r\n                            <div className={FUStyles.FoundedUsersWrapper}>\r\n                                {FoundedUsers.map(item => <User user={item}\r\n                                                                     key={item.id}\r\n                                                                     InProcess={props.InProcess}\r\n                                                                     OnUnFollow={props.OnUnFollow}\r\n                                                                     OnFollow={props.OnFollow}\r\n                                                                     IsLogined={props.IsLogined}/>)}\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    }\r\n\r\n                </div>\r\n                <button\r\n                    className={FUStyles.GoBack}\r\n                    onClick={FoundingModeOFF}>\r\n                    go back\r\n                </button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n\r\n}\r\nexport default FindUser","import React, {useState,useEffect} from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport {TControlledOpenSelectProps} from \"../GlobalTypes/UsersTypes/UsersTypes\";\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        button: {\r\n            display: 'block',\r\n            marginTop: theme.spacing(2),\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n    }),\r\n);\r\n\r\nconst ControlledOpenSelect : React.FC<TControlledOpenSelectProps> = (props) => {\r\n    const classes = useStyles();\r\n    const [count, setCount] = useState<string | number>('');\r\n    const [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setCount(props.PageSize)\r\n        }, [props.PageSize]\r\n    )\r\n\r\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\r\n        setCount(event.target.value as number);\r\n        props.OnPageSizeChange(event.target.value as number)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-controlled-open-select-label\">show users</InputLabel>\r\n                <Select\r\n                    labelId=\"demo-controlled-open-select-label\"\r\n                    id=\"demo-controlled-open-select\"\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    onOpen={handleOpen}\r\n                    value={count}\r\n                    onChange={handleChange}\r\n                >\r\n\r\n                    <MenuItem value={20}>20</MenuItem>\r\n                    <MenuItem value={50}>50</MenuItem>\r\n                    <MenuItem value={100}>100</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default ControlledOpenSelect","import React from 'react'\r\nimport Paginator from \"../assetss/common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport FindUser from \"./FindUser\";\r\nimport us from \"./Users.module.css\"\r\nimport {TUsersProps} from \"../GlobalTypes/UsersTypes/UsersTypes\";\r\nimport ControlledOpenSelect from \"./SelectPageSize.\";\r\n\r\n\r\n\r\n\r\nlet PurifyUsers : React.FC<TUsersProps> = (props) => {\r\n\r\n    props.ChangePortionSize(15);\r\n\r\n    return <div>\r\n\r\n            <FindUser  FindUserThunk={props.FindUserThunk}\r\n                      FoundedUsers={props.FoundedUsers}\r\n                      InProcess={props.InProcess}\r\n                      OnUnFollow={props.OnUnFollow}\r\n                      OnFollow={props.OnFollow}\r\n                      IsLogined={props.IsLogined}\r\n                       FindUserIsFetching={props.FindUserIsFetching}\r\n            />\r\n       <ControlledOpenSelect PageSize={props.pageSize}\r\n                              OnPageSizeChange={props.OnPageSizeChange}/>\r\n\r\n        <div className={us.UsersWrapper}>\r\n        { props.Users && props.Users.map(us =>  <User\r\n            user={us}\r\n            key={us.id}\r\n            InProcess={props.InProcess}\r\n            OnUnFollow={props.OnUnFollow}\r\n            OnFollow={props.OnFollow}\r\n            IsLogined={props.IsLogined}\r\n        />)\r\n        }\r\n        </div>\r\n\r\n        <div className={us.PaginatorPosition}>\r\n       <Paginator OnChangedPage={props.OnChangedPage}\r\n                  currentPage={props.currentPage}\r\n                  totalUsersCount={props.totalUsersCount}\r\n                      pageSize={props.pageSize}\r\n                  PortionSize={props.PortionSize}\r\n       />\r\n        </div>\r\n    </div>\r\n}\r\nexport default PurifyUsers","import {GlobalState} from \"./redux-store\";\r\n\r\nexport const GetUsers = (state : GlobalState) =>{\r\n    return state.UsersData.Users\r\n}\r\nexport const GetPageSize = (state : GlobalState) =>{\r\n    return state.UsersData.pageSize\r\n}\r\nexport const GetTotalUsersCount = (state : GlobalState) =>{\r\n    return state.UsersData.totalUsersCount\r\n}\r\n\r\nexport const GetCurrentPage = (state : GlobalState) =>{\r\n    return  state.UsersData.currentPage\r\n}\r\nexport const GetIsFeching = (state : GlobalState) =>{\r\n    return state.UsersData.IsFetching\r\n}\r\nexport const FindUserIsFetching = (state : GlobalState) =>{\r\n    return state.UsersData.FindUserIsFetching\r\n}\r\nexport const GetInProgress = (state : GlobalState) => {\r\n    return state.UsersData.InProcess\r\n}\r\n\r\nexport const GetPortionSize = (state : GlobalState) => {\r\n    return state.UsersData.PortionSize\r\n}\r\nexport const GetFoundedUserSelector = (state : GlobalState) => {\r\n    return state.UsersData.FoundedUsers\r\n}\r\n\r\n","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    followThunk,\r\n    ChangePageSize,\r\n    unfollowThunk,\r\n    SetCurrentPage,\r\n    getUsersThunk,\r\n    ToggleInProcess,\r\n    ChangePortionSize,FindUserThunk\r\n} from \"../../data/UsersReduser\";\r\nimport PurifyUsers from \"./Users\";\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    GetCurrentPage,\r\n    GetInProgress,\r\n    GetIsFeching,\r\n    GetPageSize,\r\n    GetTotalUsersCount,\r\n    GetUsers,\r\n    GetPortionSize, GetFoundedUserSelector,FindUserIsFetching\r\n} from \"../../data/Users-Selectors\";\r\nimport { GetIsLoginedSelector} from \"../../data/AuthSelectors\";\r\nimport {GlobalState} from \"../../data/redux-store\";\r\nimport {\r\n    T_MDTP_UsersContainer,\r\n    T_MSTP_UsersContainer,\r\n    TUsersContainerOwnProps\r\n} from \"../GlobalTypes/UsersTypes/UsersTypes\";\r\n\r\ntype TUsersContainerProps = T_MDTP_UsersContainer & T_MSTP_UsersContainer & TUsersContainerOwnProps\r\n\r\nclass UsersContainer extends React.Component<TUsersContainerProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsersThunk(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n   OnChangedPage = (pageNumber : number) => {\r\n        this.props.SetCurrentPage(pageNumber)\r\n        this.props.getUsersThunk(pageNumber, this.props.pageSize)\r\n    }\r\n    OnPageSizeChange =  (PageSize : number) => {\r\n     this.props.ChangePageSize(PageSize)\r\n        this.props.getUsersThunk(this.props.currentPage, PageSize)\r\n}\r\n\r\n    render() {\r\n\r\n        return <>\r\n            {this.props.IsFetching ? <Preloader/> :\r\n                <PurifyUsers Users={this.props.Users}\r\n                             totalUsersCount={this.props.totalUsersCount}\r\n                             pageSize={this.props.pageSize}\r\n                             OnChangedPage={this.OnChangedPage}\r\n                             OnFollow={this.props.followThunk}\r\n                             OnUnFollow={this.props.unfollowThunk}\r\n                             currentPage={this.props.currentPage}\r\n                             ToggleInProcess={this.props.ToggleInProcess}\r\n                             InProcess={this.props.InProcess}\r\n                             IsLogined={this.props.IsLogined}\r\n                             ChangePortionSize={this.props.ChangePortionSize}\r\n                             PortionSize={this.props.PortionSize}\r\n                             FindUserThunk={this.props.FindUserThunk}\r\n                             FoundedUsers={this.props.FoundedUsers}\r\n                             FindUserIsFetching={this.props.FindUserIsFetching}\r\n                             OnPageSizeChange={this.OnPageSizeChange}\r\n                />\r\n            }\r\n        </>\r\n    }\r\n}\r\n\r\nlet StateToProps = (state : GlobalState) : T_MSTP_UsersContainer => ({\r\n        IsLogined : GetIsLoginedSelector(state),\r\n        Users: GetUsers(state),\r\n        pageSize: GetPageSize(state),\r\n        totalUsersCount: GetTotalUsersCount(state),\r\n        currentPage: GetCurrentPage(state),\r\n        IsFetching: GetIsFeching(state),\r\n        FindUserIsFetching: FindUserIsFetching(state),\r\n        InProcess: GetInProgress(state),\r\n        PortionSize : GetPortionSize(state),\r\n        FoundedUsers : GetFoundedUserSelector(state)\r\n})\r\n\r\n\r\n\r\nexport default compose(\r\n    connect<T_MSTP_UsersContainer,T_MDTP_UsersContainer,TUsersContainerOwnProps, GlobalState>(StateToProps,\r\n        {followThunk, unfollowThunk, SetCurrentPage,\r\n            ToggleInProcess, getUsersThunk,ChangePortionSize,FindUserThunk, ChangePageSize})\r\n    //@ts-ignore\r\n)(UsersContainer)","import React, {useState, useEffect} from \"react\"\r\nimport {TProfileStatusFProps} from \"../../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\nconst ProfileStatusF : React.FC<TProfileStatusFProps> = (props) => {\r\n\r\n\r\n    let [IsStatusChanging, SetIsStatusChanging] = useState(false)\r\n    let [Status, SetStatus] = useState<string | null>(props.status)\r\n\r\n    useEffect(() => {\r\n            SetStatus(props.status)\r\n        }, [props.status]\r\n    )\r\n\r\n    const StatusChangingON = () => {\r\n        SetIsStatusChanging(true)\r\n    }\r\n\r\n    const StatusChangingOFF = () => {\r\n        SetIsStatusChanging(false)\r\n        if(Status !== props.status){\r\n            props.SetProfileStatus(Status)\r\n        }\r\n    }\r\n\r\n    const OnStatusChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        SetStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (<div>\r\n            {props.IsMyPage ?\r\n                <div>\r\n                    {!IsStatusChanging ?\r\n                        <div>\r\n                <span onClick={StatusChangingON}>\r\n                Status  : {Status || \"the status is empty\"}\r\n                </span>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <input  onChange={OnStatusChange} onBlur={StatusChangingOFF} autoFocus={true}\r\n                                   value={Status ? Status : \"\"}/>\r\n                        </div>\r\n\r\n                    }\r\n                </div>\r\n                : Status || \"the status is empty\"\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusF","import React from \"react\"\r\nimport cs from \"./Contact.module.css\"\r\nimport {TContactProps} from \"../../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\nconst Contact : React.FC<TContactProps> = (props) =>{\r\n\r\n\r\n    return <span>\r\n        {props.ContactValue &&\r\n        <div className={cs.contact} >\r\n        {props.ContactName} : {props.ContactValue}\r\n        </div>\r\n        }\r\n    </span>\r\n}\r\n\r\n\r\nexport default Contact","import React from \"react\"\r\nimport Contact from \"./Contact\";\r\nimport pds from \"./ProfileData.module.css\"\r\nimport {TProfileDataProps} from \"../../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\nconst ProfileData : React.FC<TProfileDataProps> = (props) => {\r\n\r\n\r\nconst ProfileContacts  =  Object.keys(props.profile.contacts)\r\n    //@ts-ignore\r\nconst ProfileContactsValues = ProfileContacts.map(el => props.profile.contacts[el])\r\n\r\nconst ValueNotNull = (values : any) =>{\r\n        return values !== null\r\n    }\r\n\r\n    return <div className={pds.aboutME}>\r\n        {\r\n            props.profile.aboutMe && <div>\r\n            {props.profile.aboutMe}\r\n        </div>\r\n        }\r\n\r\n        {\r\n            props.profile.lookingForAJob ?\r\n            <div>\r\n                Im looking for a job\r\n            </div>\r\n            :\r\n            <div>\r\n                Im have a job\r\n            </div>\r\n        }\r\n        {props.profile.lookingForAJobDescription &&\r\n        <div>\r\n            {props.profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div className={pds.contacts}>\r\n            <div>\r\n                {props.IsMyPage && <button className={pds.buttonEditInformation}\r\n                                           onClick={props.ContactsEditingOn}>\r\n                    edit information\r\n                </button>}\r\n            </div>\r\n            {\r\n                ProfileContactsValues.some(ValueNotNull) && \"My contacts :\"\r\n            }\r\n\r\n            {ProfileContacts.map(key => {\r\n                return <Contact key={key} ContactName={key}\r\n                                //@ts-ignore\r\n                                ContactValue={props.profile.contacts[key]}/>\r\n            })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default ProfileData","\r\nimport UserPhoto from \"../../assetss/images/userPhoto.jpg\";\r\nimport React, {ChangeEvent} from \"react\"\r\nimport pc from './UserInfo.module.css'\r\nimport Done from '@material-ui/icons/AddAPhoto';\r\nimport {TProfileAvatarProps} from \"../../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\nconst ProfileAvatar : React.FC<TProfileAvatarProps> = (props) => {\r\n\r\n\r\n    const OnPhotoSelected = (event : ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files && event.target.files.length) {\r\n            props.SetProfilePhoto(event.target.files[0])\r\n        }\r\n    }\r\n    return <div>\r\n\r\n        <div>\r\n            {props.IsMyPage &&\r\n            <div className={pc.AddPhotoButtonPosition}>\r\n                <input className={pc.SelectPhoto} type={\"file\"}\r\n                       onChange={OnPhotoSelected}\r\n                       accept=\"image/*\"\r\n                       id={\"file\"}/>\r\n\r\n                <label htmlFor=\"file\">\r\n                    <Done   color=\"primary\"  />\r\n                </label>\r\n            </div>\r\n            }\r\n        </div>\r\n\r\n        <div>\r\n            <img id={\"avatar\"} className={pc.UserPhoto}\r\n                 src={props.photos.large ? props.photos.large  :UserPhoto }/>\r\n        </div>\r\n\r\n    </div>\r\n}\r\nexport default ProfileAvatar","import React from 'react'\r\nimport EVS from \"./ElementsValidators.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nexport const TextArea = ({input,meta,...props}) =>{\r\n\r\n    return(\r\n        <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\r\n         <textarea className={EVS.textarea} {...input} {...props}/>\r\n            {meta.error && meta.touched ?  <span> &nbsp;&nbsp; {meta.error}</span> : \"\"}\r\n            </div>\r\n    )\r\n\r\n}\r\nexport const TextAreaAboutMe = ({input,meta,...props}) =>{\r\n    return(\r\n        <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\r\n            <textarea className={EVS.textareaAboutMe} {...input} {...props}/>\r\n            {meta.error && meta.touched ?  <span> &nbsp;&nbsp; {meta.error}</span> : \"\"}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport const TextAreaMessage = ({input,meta,...props}) =>{\r\n    return(\r\n        <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\r\n            <textarea className={EVS.TextAreaMessage} {...input} {...props}/>\r\n            {meta.error && meta.touched ?  <span> &nbsp;&nbsp; {meta.error}</span> : \"\"}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport const TextAreaDialogsMessage = ({input,meta,...props}) =>{\r\n    return(\r\n        <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\r\n            <textarea className={EVS.TextAreaDialogsMessage} {...input} {...props}/>\r\n            {meta.error && meta.touched ?  <span> &nbsp;&nbsp; {meta.error}</span> : \"\"}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport const Input = ({input,meta,...props}) =>{\r\n    return(\r\n        <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\r\n            <div>\r\n            <input className={EVS.input} {...input} {...props}/>\r\n            </div>\r\n            {meta.error && meta.touched ?   <span> &nbsp;&nbsp; {meta.error}</span> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const InputName = ({input,meta,...props}) =>{\r\n    return(\r\n        <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\r\n\r\n                <input className={EVS.input} {...input} {...props}/>\r\n\r\n            {meta.error && meta.touched ?   <span> &nbsp;&nbsp; {meta.error}</span> : \"\"}\r\n        </div>\r\n    )\r\n}\r\nexport const ContactFormInput = ({input,meta,...props}) =>{\r\n    return(\r\n        <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\r\n                <input className={EVS.ContactFormInput} {...input} {...props} />\r\n            {meta.error && meta.touched ?   <span> &nbsp;&nbsp; {meta.error}</span> : \"\"}\r\n        </div>\r\n    )\r\n}\r\nexport const TaskFormInput = ({input,meta,...props}) =>{\r\n    return(\r\n        <div className={ meta.error && meta.touched ? EVS.formControl + \" \" + EVS.error : \"\"} >\r\n            <input  className={EVS.TaskFormInput} {...input} {...props}/>\r\n            {meta.error && meta.touched ?   <span> &nbsp;&nbsp; {meta.error}</span> : \"\"}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const CreateField = (placeholder,name,validators,component,props ={},text =\"\") =>{\r\n  return  <div>\r\n        <Field   placeholder={placeholder} name={name} validate={validators}\r\n        component={component} {...props}/> {text}\r\n\r\n    </div>\r\n}","import React from \"react\"\r\nexport type TFieldValidator = (value : string) => string | undefined | JSX.Element\r\n\r\nexport const required : TFieldValidator= (value : string) =>{\r\nif(value ){\r\n    return undefined\r\n}\r\nelse return <div>\r\n    This field is required\r\n</div>\r\n}\r\n\r\n\r\nexport const MaxLengthCreator = (MaxLengthValue : number) : TFieldValidator => (value) =>{\r\nif(value && value.length > MaxLengthValue) {\r\n    return `Maximal length is a ${MaxLengthValue} symbols`\r\n}\r\nelse return undefined\r\n    }\r\n\r\n","import React from \"react\"\r\nimport {\r\n    Input,\r\n    CreateField,\r\n    TextAreaAboutMe,\r\n    ContactFormInput,InputName\r\n} from \"../../assetss/common/ValidatorsComponents/ElementsValidators\";\r\nimport pc from './UserInfo.module.css'\r\nimport {MaxLengthCreator, required} from \"../../utils/validators\";\r\nimport {InjectedFormProps} from \"redux-form\";\r\nimport {TProfileDataEditorFormData, TProfileDataEditorFormOwnProps} from \"../../GlobalTypes/UsersTypes/UsersTypes\";\r\n\r\n\r\nconst max300=MaxLengthCreator(300)\r\nconst max150=MaxLengthCreator(150)\r\nconst max50=MaxLengthCreator(50)\r\n\r\nconst ProfileDataEditorForm : React.FC<InjectedFormProps<TProfileDataEditorFormData,TProfileDataEditorFormOwnProps> & TProfileDataEditorFormOwnProps>\r\n    = (props) => {\r\n\r\n    return <div className={pc.EditorFormBG}>\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n            <button className={pc.buttonSaveChanges}>\r\n                Save changes\r\n            </button>\r\n            <button className={pc.buttonGoBack } onClick={props.ContactsEditingOFF}>\r\n                go back\r\n            </button>\r\n\r\n            <div className={pc.MyName}>\r\n                <b>My name is : </b>\r\n                {CreateField(\"Enter your full name\", \"fullName\", [required,max50], InputName)}\r\n\r\n            </div>\r\n\r\n            <div>\r\n                <b>are u looking for a job? :</b>\r\n                {CreateField(\"\", \"lookingForAJob\", [max300], Input, {type: \"checkbox\"})}\r\n            </div>\r\n\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                {CreateField(\"Enter description\", \"lookingForAJobDescription\", [max150],\r\n                    TextAreaAboutMe)}\r\n            </div>\r\n            <div>\r\n                <b> about me:</b>\r\n                {CreateField(\"print something about you\", \"aboutMe\", [max300],\r\n                    TextAreaAboutMe)}\r\n            </div>\r\n\r\n            <div className={pc.MyContacts}>My contacts :</div>\r\n            {props.error\r\n                ?\r\n                <div className={pc.FormError}>\r\n                    {props.error}\r\n                </div>\r\n                : null}\r\n            <div className={pc.ContactsForm}>\r\n                {Object.keys(props.contacts).map(key => {\r\n                    return <div key={key}>\r\n                        {key} : {CreateField(key, \"contacts.\" + key, [max150], ContactFormInput)}\r\n                    </div>\r\n                })}\r\n            </div>\r\n\r\n\r\n\r\n        </form>\r\n    </div>\r\n}\r\n\r\nexport default ProfileDataEditorForm","import React, {useState} from \"react\"\r\nimport pds from \"./ProfileData.module.css\";\r\nimport lm from \"../../Login/login.module.css\";\r\nimport {CreateField, TextAreaMessage} from \"../../assetss/common/ValidatorsComponents/ElementsValidators\";\r\nimport {MaxLengthCreator, required} from \"../../utils/validators\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\nimport pc from \"./UserInfo.module.css\";\r\nimport {TSendMessageOnUserPageProps} from \"../../GlobalTypes/ProfileTypes/ProfileTypes\";\r\nimport {\r\n    TSendMessageOnUserPageFormData,\r\n    TSendMessageOnUserPageFormOwnProps\r\n} from \"../../GlobalTypes/DialogsTypes/MessagesTypes\";\r\n\r\nlet maxLength300 = MaxLengthCreator(300)\r\n\r\nconst SendMessageOnUserPageForm : React.FC<InjectedFormProps<TSendMessageOnUserPageFormData, TSendMessageOnUserPageFormOwnProps>\r\n    & TSendMessageOnUserPageFormOwnProps >\r\n    = (props) => {\r\n\r\n    return (\r\n\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    {CreateField(\"Enter message text\", \"MessageFromUserPage\",\r\n                        [required, maxLength300], TextAreaMessage)}\r\n                </div>\r\n\r\n                {props.error\r\n                    ?\r\n                    <div className={lm.AuthError}>\r\n                        {props.error}\r\n                    </div>\r\n                    : null\r\n                }\r\n                <div>\r\n                    <button className={pc.buttonSaveChanges}> send message</button>\r\n                    <button className={pc.buttonGoBack }\r\n                            onClick={props.MessageSendingModOFF}> go back </button>\r\n                </div>\r\n\r\n            </form>\r\n        </div>)\r\n}\r\nconst ReduxSendMessageOnUserPageForm = reduxForm<TSendMessageOnUserPageFormData,TSendMessageOnUserPageFormOwnProps>({form: 'SendMessageForm'})(SendMessageOnUserPageForm)\r\n\r\nconst SendMessageOnUserPage : React.FC<TSendMessageOnUserPageProps> = (props) => {\r\n\r\n    let [ChosedSendMessage, SetChosedSendMessage] = useState(false)\r\n\r\n\r\n    const MessageSendingModON = () => {\r\n        SetChosedSendMessage(true)\r\n    }\r\n\r\n    const MessageSendingModOFF = () => {\r\n        SetChosedSendMessage(false)\r\n    }\r\n    const SendNewMessage = (Formdata : TSendMessageOnUserPageFormData) => {\r\n        {props.UserID && props.SendNewMessageThunk(props.UserID, Formdata.MessageFromUserPage)}\r\n        SetChosedSendMessage(false)\r\n    }\r\n\r\n\r\n    return (<div>\r\n\r\n\r\n            {!props.IsMyPage ?\r\n                <div>\r\n                    {!ChosedSendMessage ?\r\n                        <div>\r\n                            <button className={pds.buttonEditInformation} onClick={MessageSendingModON}>\r\n                                send message to {props.UserName}\r\n                            </button>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            < ReduxSendMessageOnUserPageForm\r\n                                onSubmit={SendNewMessage}\r\n                                MessageSendingModOFF={MessageSendingModOFF}/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SendMessageOnUserPage","import React, {useState} from \"react\"\r\nimport pc from './UserInfo.module.css'\r\nimport Preloader from \"../../assetss/common/Loader/Loader\";\r\nimport ProfileStatusF from \"./ProfileStatusF\";\r\nimport ProfileData from \"./ProfileData\"\r\nimport ProfileAvatar from \"./ProfileAvatar\";\r\nimport ProfileDataEditorForm from \"./ProfileDataEditorForm\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport SendMessageOnUserPage from \"./SendMessageOnUserPage\";\r\nimport { TUserInfoProps} from \"../../GlobalTypes/ProfileTypes/ProfileTypes\";\r\nimport {TProfileDataEditorFormData, TProfileDataEditorFormOwnProps} from \"../../GlobalTypes/UsersTypes/UsersTypes\";\r\n\r\n\r\nconst UserInfo : React.FC<TUserInfoProps> = (props) => {\r\n\r\n    let [ContactsIsEditing, SetContactsIsEditing] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    const ContactsEditingOn = () => {\r\n        SetContactsIsEditing(true)\r\n    }\r\n\r\n    const ContactsEditingOFF = () => {\r\n        SetContactsIsEditing(false)\r\n    }\r\n\r\n    const PutNewProfileInfoToServer = async (formData : TProfileDataEditorFormData) => {\r\n      await props.SaveProfileData(formData)\r\n          SetContactsIsEditing(false)\r\n    }\r\n\r\n    return <div className={pc.userdescrition}>\r\n        <div className={pc.ProfileName}>\r\n            {props.profile.fullName && props.profile.fullName }\r\n        </div>\r\n\r\n        <ProfileAvatar IsMyPage={props.IsMyPage}\r\n                       photos={props.profile.photos}\r\n                       SetProfilePhoto={props.SetProfilePhoto}/>\r\n\r\n\r\n        <ProfileStatusF status={props.status}\r\n                        SetProfileStatus={props.SetProfileStatus}\r\n                        IsMyPage={props.IsMyPage}/>\r\n\r\n        {props.IsLogined &&\r\n            <SendMessageOnUserPage UserName={props.profile.fullName}\r\n                                   IsMyPage={props.IsMyPage}\r\n                                   UserID={props.profile.userId}\r\n                                   SendNewMessageThunk={props.SendNewMessageThunk}\r\n            />\r\n        }\r\n\r\n\r\n        {\r\n            ContactsIsEditing ?\r\n            <div>\r\n                <ProfileDataEditorFormRedux initialValues={props.profile}\r\n                                            contacts={props.profile.contacts}\r\n                                            onSubmit={PutNewProfileInfoToServer}\r\n                       ContactsEditingOFF={ContactsEditingOFF}/>\r\n            </div>\r\n            : <div>\r\n                <ProfileData profile={props.profile}\r\n                             IsMyPage={props.IsMyPage}\r\n                             ContactsEditingOn={ContactsEditingOn}/>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\n\r\nconst ProfileDataEditorFormRedux = reduxForm<TProfileDataEditorFormData,TProfileDataEditorFormOwnProps>({form: 'ProfileDataEditorForm'})(ProfileDataEditorForm)\r\nexport default UserInfo;","import React from 'react';\r\nimport pc from './Post.module.css'\r\nimport UserPhoto from \"../../../assetss/images/userPhoto.jpg\";\r\nimport {TPostProps} from \"../../../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\nconst Post : React.FC<TPostProps> = (props) => {\r\n    return (\r\n        <div className={pc.item}>\r\n            {\r\n                props.profile &&\r\n                <img className={pc.img} src={props.profile.photos.large ? props.profile.photos.large :  UserPhoto}/>\r\n            }\r\n            {props.message}\r\n            <div>\r\n                {props.likecount} <span>\r\n                    <img className={pc.like} src='https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Ei-like.svg/1024px-Ei-like.svg.png'/>\r\n                </span>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Post;","import React from 'react';\r\nimport pc from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required, MaxLengthCreator} from \"../../utils/validators\";\r\nimport {TextArea} from \"../../assetss/common/ValidatorsComponents/ElementsValidators\"\r\nimport {TMyPostContainerProps, TMyPostsFormData, TMyPostsOwnProps} from \"../../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\n\r\nconst maxValue250 = MaxLengthCreator(250)\r\n\r\nconst MyPostForm : React.FC<InjectedFormProps<TMyPostsFormData, TMyPostsOwnProps> & TMyPostsOwnProps>\r\n    = (props) => {\r\n\r\n        return <div>\r\n            {props.IsMyPage &&\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field name={'PostMessage'}\r\n                           placeholder={\"type any info here\"}\r\n                           component={TextArea}\r\n                           validate={[required, maxValue250]}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <button className={pc.button}> Send post</button>\r\n                </div>\r\n\r\n            </form>\r\n            }\r\n        </div>\r\n    }\r\n\r\nconst ReduxMyPostForm = reduxForm<TMyPostsFormData,TMyPostsOwnProps>({form: 'mypost'})(MyPostForm )\r\n\r\n\r\nconst MyPosts : React.FC<TMyPostContainerProps> = React.memo((props) => {\r\n\r\n    const SendPost = (formData : TMyPostsFormData) => {\r\n        props.addpost(formData.PostMessage)\r\n    }\r\n\r\n    let Posts = props.posts.map(p => <Post message={p.Post} likecount={p.likesCount} profile={props.profile}/>);\r\n\r\n    return (\r\n        <div className={pc.pp}>\r\n            {props.IsMyPage ?  <h3>My posts</h3> :  <h3>Posts</h3>}\r\n            {<ReduxMyPostForm onSubmit={SendPost} {...props}/>}\r\n            <div className={pc.marginPost}>\r\n                {Posts}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport {addpost} from \"../../../data/ProfileReduser\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {GetIsMyPageSelector, GetPostsSelector} from \"../../../data/ProfileSelectors\";\r\nimport {GlobalState} from \"../../../data/redux-store\";\r\nimport {TMyPostContainerProps} from \"../../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\n\r\n\r\nclass MyPostsConteiner extends React.PureComponent<TMyPostContainerProps> {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <MyPosts posts={this.props.posts}\r\n                     addpost={this.props.addpost}\r\n                     profile={this.props.profile}\r\n                     IsMyPage={this.props.IsMyPage}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet StateProps = (state : GlobalState) => ({\r\n    posts: GetPostsSelector(state),\r\n    IsMyPage: GetIsMyPageSelector(state)\r\n})\r\n\r\nexport default connect(StateProps, {addpost})(MyPostsConteiner)\r\n","import React from 'react';\r\nimport UserInfo from \"./UserInfo/UserInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsConteiner\";\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\nimport {TProfileProps} from \"../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\nconst Profile: React.FC<TProfileProps> = (props) => {\r\n\r\n    return <div>\r\n        {props.IsFetching ? <Preloader/> :\r\n            <>\r\n                <UserInfo profile={props.profile}\r\n                          status={props.status}\r\n                          SetProfileStatus={props.SetProfileStatus}\r\n                          IsMyPage={props.IsMyPage}\r\n                          SetProfilePhoto={props.SetProfilePhoto}\r\n                          SaveProfileData={props.SaveProfileData}\r\n                          SendNewMessageThunk={props.SendNewMessageThunk}\r\n                          IsLogined={props.IsLogined}\r\n                />\r\n                < MyPostsContainer profile={props.profile}/>\r\n            </>\r\n        }\r\n    </div>\r\n}\r\nexport default Profile","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport {\r\n    GetProfileThunk,\r\n    GetProfileStatusThunk,\r\n    SetProfileStatusThunk,\r\n    SetProfilePhotoThunk,\r\n    SetIsMyPage, UpdateProfileInfoThunk\r\n}\r\n    from '../../data/ProfileReduser'\r\nimport {compose} from \"redux\";\r\nimport {\r\n    GetIsMyPageSelector, GetProfileIsFetching,\r\n    GetProfileSelector, GetStatusSelector\r\n} from \"../../data/ProfileSelectors\";\r\nimport {GetIsLoginedSelector, GetUserIDSelector} from \"../../data/AuthSelectors\";\r\nimport {SendNewMessageThunk} from \"../../data/DIalogsReduser\"\r\nimport {GlobalState} from \"../../data/redux-store\";\r\nimport {\r\n    T_MDTP_ProfileContainer,\r\n    T_MSTP_ProfileContainer,\r\n    TProfileContainerOwnProps\r\n} from \"../GlobalTypes/ProfileTypes/ProfileTypes\";\r\n\r\n\r\nexport type TProfileContainerProps = T_MSTP_ProfileContainer & T_MDTP_ProfileContainer & TProfileContainerOwnProps\r\n\r\nclass ProfileContainer extends React.Component<TProfileContainerProps> {\r\n\r\n    ProfileDataToPaint(){\r\n        let ProfileID = this.props.match.params.userID\r\n        if(!ProfileID){\r\n            ProfileID = this.props.userID\r\n            this.props.SetIsMyPage(true) //  if this branch is going so we are in own page\r\n            if(!ProfileID){\r\n                //@ts-ignore\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        else{\r\n            this.props.SetIsMyPage(false) // if this branch is going so we are on some user page\r\n        }\r\n        if(ProfileID){\r\n            this.props.GetProfileThunk(ProfileID)\r\n            this.props.GetProfileStatusThunk(ProfileID)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.ProfileDataToPaint()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: TProfileContainerProps) {\r\n\r\n        if (this.props.match.params.userID !== prevProps.match.params.userID) {\r\n            this.ProfileDataToPaint()\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     SetProfileStatus={this.props.SetProfileStatusThunk}\r\n                     SetProfilePhoto={this.props.SetProfilePhotoThunk}\r\n                     IsMyPage={this.props.IsMyPage}\r\n                     SaveProfileData={this.props.UpdateProfileInfoThunk}\r\n                     SendNewMessageThunk={this.props.SendNewMessageThunk}\r\n                     IsLogined={this.props.IsLogined}\r\n                     IsFetching={this.props.IsFetching}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet MapStateToProps = (state: GlobalState): T_MSTP_ProfileContainer => ({\r\n    profile: GetProfileSelector(state),\r\n    status: GetStatusSelector(state),\r\n    userID: GetUserIDSelector(state),\r\n    IsMyPage: GetIsMyPageSelector(state),\r\n    IsFetching: GetProfileIsFetching(state),\r\n    IsLogined: GetIsLoginedSelector(state)\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect<T_MSTP_ProfileContainer, T_MDTP_ProfileContainer, TProfileContainerOwnProps, GlobalState>\r\n    (MapStateToProps, {\r\n        GetProfileThunk, GetProfileStatusThunk,\r\n        SetProfileStatusThunk, SetProfilePhotoThunk, SetIsMyPage,\r\n        UpdateProfileInfoThunk, SendNewMessageThunk\r\n    }),\r\n    withRouter)(ProfileContainer)","import React from \"react\"\r\nimport ms from \"./Messages.module.css\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport CloseButton from \"../../assetss/images/closeButton.png\"\r\nimport {TDeleteConfirmWindowProps} from \"../../GlobalTypes/DialogsTypes/MessagesTypes\";\r\n\r\n\r\nconst DeleteConfirmWindow : React.FC<TDeleteConfirmWindowProps> = (props) => {\r\n\r\n    const closeWindow = () => {\r\n        props.SetToConfirmDeleting(false)\r\n    }\r\n\r\n    return <div>\r\n\r\n        <Dialog\r\n            className={ms.confirmDeletingWindow} open={props.ToConfirmDeleting}>\r\n\r\n            <div className={ms.wrapper}>\r\n                <img onClick={closeWindow} className={ms.imgClose} src={CloseButton}/>\r\n                <h3 className={ms.confirmDeletingWindowHeader}>\r\n                    Delete messages confirm\r\n                </h3>\r\n                <div className={ms.confirmDeletingWindowText}>\r\n                    Are you sure about this? you will can't restored this message.\r\n                    You will delete message only for your own\r\n                </div>\r\n                <div className={ms.confirmDeletingWindowButtons}>\r\n                    <button className={ms.deleteMessageStyle} onClick={props.deleteMessage}>\r\n                        yes\r\n                    </button>\r\n                    <span className={ms.buttontsDelta}>\r\n                       <button className={ms.deleteMessageStyle} onClick={closeWindow}>\r\n                           no\r\n                       </button>\r\n                </span>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        </Dialog>\r\n\r\n    </div>\r\n\r\n}\r\nexport default DeleteConfirmWindow","import React, {useState} from \"react\"\r\nimport d from \"../Dialogs.module.css\";\r\nimport DeleteConfirmWindow from \"./DeleteConfirmWindow\";\r\nimport ToTrash from \"../../assetss/images/trash.png\"\r\nimport {TDeleteMessageProps} from \"../../GlobalTypes/DialogsTypes/MessagesTypes\";\r\n\r\n\r\nconst DeleteMessage: React.FC<TDeleteMessageProps> = (props) => {\r\n\r\n    let [ToConfirmDeleting, SetToConfirmDeleting] = useState<boolean>(false)\r\n\r\n\r\n    const deleteMessage = () => {\r\n        props.DeleteMessageThunk(props.MessageID, props.DialoguserID)\r\n        SetToConfirmDeleting(false)\r\n    }\r\n\r\n\r\n    return <div className={d.ConfirmText}>\r\n        {!ToConfirmDeleting &&\r\n        <img src={ToTrash} className={d.ToTrash} onClick={() => {\r\n            SetToConfirmDeleting(true)\r\n        }}/>\r\n\r\n        }\r\n        <DeleteConfirmWindow\r\n            SetToConfirmDeleting={SetToConfirmDeleting}\r\n            ToConfirmDeleting={ToConfirmDeleting}\r\n            deleteMessage={deleteMessage}\r\n\r\n        />\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default DeleteMessage","import React, {useEffect, useState} from \"react\"\r\nimport Preloader from \"../../assetss/common/Loader/Loader\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport mwuStyles from \"./Messages.module.css\"\r\nimport UserPhoto from \"../../assetss/images/userPhoto.jpg\";\r\nimport Viewed from \"../../assetss/images/viewed1.jpg\";\r\nimport {MaxLengthCreator, required} from \"../../utils/validators\";\r\nimport d from \"../Dialogs.module.css\";\r\nimport {Field, reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {TextAreaDialogsMessage} from \"../../assetss/common/ValidatorsComponents/ElementsValidators\";\r\n\r\nimport DeleteMessage from \"./DeleteMessage\";\r\n\r\nimport {\r\n    TMessagesWithUserFormData, TMessagesWithUserFormOwnProps,\r\n    TMessagesWithUserProps\r\n} from \"../../GlobalTypes/DialogsTypes/MessagesTypes\";\r\n\r\nconst maxValue300 = MaxLengthCreator(300)\r\n\r\nconst MessageWithUserForm: React.FC<InjectedFormProps<TMessagesWithUserFormData ,TMessagesWithUserFormOwnProps>\r\n    & TMessagesWithUserFormOwnProps> =\r\n    (props) => {\r\n\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n\r\n                    <div className={d.messages}>\r\n                        <div>\r\n                            <div>\r\n                                <Field name={\"MessageTextArea\"}\r\n                                       component={TextAreaDialogsMessage}\r\n                                       placeholder={\"Enter your message here\"}\r\n                                       validate={[required, maxValue300]}/>\r\n                            </div>\r\n                            <div>\r\n                                <button className={d.button}> send message</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst ReduxMessageWithUserForm = reduxForm<TMessagesWithUserFormData,TMessagesWithUserFormOwnProps>({form: 'messages'})(MessageWithUserForm)\r\n\r\n\r\nconst MessagesWithUser: React.FC<TMessagesWithUserProps> = (props) => {\r\n\r\n\r\n    const SendNewMessage = (FormData: TMessagesWithUserFormData) => {\r\n        props.SendNewMessageThunk(props.DialoguserID, FormData.MessageTextArea)\r\n    }\r\n\r\n    let MessagesWithUserData = {\r\n        InterlocutorAvatar: props.InterlocutorAvatar,\r\n        UserAvatar: props.UserAvatar,\r\n        DialogsMessages: props.DialogsMessages\r\n    }\r\n\r\n    type TMessagesWithUserData = typeof MessagesWithUserData\r\n\r\n    let [MessagesData, SetMessagesData] = useState<TMessagesWithUserData>(MessagesWithUserData)\r\n\r\n\r\n    useEffect(() => {\r\n            SetMessagesData(MessagesWithUserData)\r\n        }, [MessagesWithUserData]\r\n    )\r\n\r\n    return <div>\r\n        {MessagesData.DialogsMessages && MessagesData.DialogsMessages.items ?\r\n            MessagesData.DialogsMessages.items.map(item => {\r\n                return (\r\n                    <div className={mwuStyles.fontStyles} key={item.id}>\r\n                        <div className={mwuStyles.dateStyle}>\r\n                            was sent at : &nbsp;&nbsp;\r\n                            {item.addedAt.split(\"T\")[0]}\r\n                        </div>\r\n\r\n\r\n                        <div className={mwuStyles.MessageFormStyle}>\r\n                            <div>\r\n                                {item.senderName}  &nbsp;&nbsp;\r\n                                {item.addedAt.split(\"T\")[1].split(\".\")[0].split(\":\")[0]}:\r\n                                {item.addedAt.split(\"T\")[1].split(\".\")[0].split(\":\")[1]}\r\n                            </div>\r\n\r\n                            <NavLink to={`/Profile/${item.senderId}`}>\r\n                                {item.senderId !== props.MyID\r\n                                    ?\r\n                                    <img className={mwuStyles.img}\r\n                                         src={MessagesData.InterlocutorAvatar\r\n                                             ? MessagesData.InterlocutorAvatar\r\n                                             : UserPhoto}/>\r\n                                    :\r\n                                    <img className={mwuStyles.img}\r\n                                         src={MessagesData.UserAvatar\r\n                                             ? MessagesData.UserAvatar\r\n                                             : UserPhoto}/>\r\n                                }\r\n                            </NavLink>\r\n\r\n                            <div className={mwuStyles.messageText}>\r\n                                &nbsp;&nbsp;  {item.body}\r\n                            </div>\r\n                            <DeleteMessage DialoguserID={props.DialoguserID}\r\n                                           MessageID={item.id}\r\n                                           DeleteMessageThunk={props.DeleteMessageThunk}\r\n                            />\r\n                            <div>\r\n                                {item.viewed &&\r\n                                <img src={Viewed} className={mwuStyles.viewed}/>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n\r\n            : <Preloader/>\r\n        }\r\n\r\n        {MessagesData.DialogsMessages ?\r\n            <>\r\n                <ReduxMessageWithUserForm onSubmit={SendNewMessage} {...props} />\r\n\r\n            </>\r\n            : <Preloader/>\r\n        }\r\n    </div>\r\n\r\n}\r\nexport default MessagesWithUser","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport {\r\n    GetIsFetchingDialogs, GetDialogsMessagesSelector,\r\n    GetinterlocutorAvatarSelector, GetUserAvatarSelector\r\n} from \"../../../data/DialogsSelectors\";\r\nimport MessagesWithUser from \"./MessagesWithUser\";\r\nimport {AuthRedirect} from \"../../hocs/AuthRedirect\";\r\nimport {\r\n    SendNewMessageThunk,\r\n    GetNewMessagesThunk,\r\n    GetInterlocutorAvatarThunk,\r\n    GetProfileAvatarThunk,\r\n    DeleteMessageThunk,\r\n    GetNewMessagesCountThunk\r\n} from \"../../../data/DIalogsReduser\"\r\nimport {GetUserIDSelector} from \"../../../data/AuthSelectors\";\r\nimport {GetNewMessagesCountSelector} from \"../../../data/InitialozationSelectors\";\r\nimport Preloader from \"../../assetss/common/Loader/Loader\";\r\nimport {T_MDTP_MessagesContainer,T_MSTP_MessagesContainer, TMessagesContainerOwnProps} from \"../../GlobalTypes/DialogsTypes/MessagesTypes\";\r\nimport {GlobalState} from \"../../../data/redux-store\";\r\n\r\ntype TMessagesContainerProps = T_MDTP_MessagesContainer & T_MSTP_MessagesContainer & TMessagesContainerOwnProps\r\n\r\nclass MessagesContainer extends React.Component<TMessagesContainerProps> {\r\n\r\n    componentDidMount() {\r\n        const DialogUserID = this.props.match.params.userID\r\n        this.props.GetNewMessagesThunk(DialogUserID)\r\n        this.props.GetInterlocutorAvatarThunk(DialogUserID)\r\n        this.props.GetProfileAvatarThunk(this.props.MyID)\r\n        if(this.props.NewMessagesCount > 0){\r\n            this.props.GetNewMessagesCountThunk()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            {\r\n                this.props.IsFetching ? <Preloader/> :\r\n                    <MessagesWithUser InterlocutorAvatar={this.props.InterlocutorAvatar}\r\n                                      UserAvatar={this.props.UserAvatar}\r\n                                      MyID={this.props.MyID}\r\n                                      DialogsMessages={this.props.DialogsMessages}\r\n                                      DeleteMessageThunk={this.props.DeleteMessageThunk}\r\n                                      SendNewMessageThunk={this.props.SendNewMessageThunk}\r\n                                      DialoguserID={this.props.match.params.userID}/>\r\n            }\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet StateToProps = (state : GlobalState)  : T_MSTP_MessagesContainer => ({\r\n    DialogsMessages : GetDialogsMessagesSelector(state),\r\n    InterlocutorAvatar : GetinterlocutorAvatarSelector(state),\r\n    UserAvatar :  GetUserAvatarSelector(state),\r\n    MyID: GetUserIDSelector(state),\r\n    NewMessagesCount : GetNewMessagesCountSelector(state),\r\n    IsFetching : GetIsFetchingDialogs(state)\r\n})\r\n\r\nexport default  compose(connect<T_MSTP_MessagesContainer,T_MDTP_MessagesContainer,TMessagesContainerOwnProps,GlobalState>(StateToProps,\r\n    {\r\n        GetNewMessagesThunk, SendNewMessageThunk,\r\n        GetInterlocutorAvatarThunk,\r\n        GetProfileAvatarThunk,DeleteMessageThunk,GetNewMessagesCountThunk\r\n    }),\r\n    AuthRedirect,\r\n    withRouter)(MessagesContainer)","import React from 'react';\r\nimport { InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {LoginThunk} from \"../../data/AuthReducer\"\r\nimport {required, MaxLengthCreator} from \"../utils/validators\"\r\nimport {CreateField, Input, InputName} from \"../assetss/common/ValidatorsComponents/ElementsValidators\"\r\nimport lm from \"../Login/login.module.css\"\r\nimport LoginUserPhoto from \"../assetss/images/userLog.jpg\"\r\nimport {Redirect} from \"react-router\";\r\nimport {\r\n    LoginOwnProps,\r\n    T_MDTP_Login,\r\n    T_MSTP_Login,\r\n    TLoginFormData,\r\n} from \"../GlobalTypes/AuthTypes/LoginTypes\";\r\nimport {GlobalState} from \"../../data/redux-store\";\r\nimport {TLoginFormOwnProps} from \"../GlobalTypes/LoginTypes/LoginTypes\";\r\n\r\n\r\nconst maxLength50 = MaxLengthCreator(50)\r\n\r\ntype TLoginProps = T_MSTP_Login & T_MDTP_Login & LoginOwnProps\r\n\r\nconst MapStateToProps = (state : GlobalState) : T_MSTP_Login => ({\r\n    IsLogined: state.Auth.IsLogined,\r\n    CaptchaUrl: state.Auth.CaptchaUrl\r\n})\r\n\r\nconst LoginForm : React.FC<InjectedFormProps<TLoginFormData, TLoginFormOwnProps > & TLoginFormOwnProps>= (props) => {\r\n\r\n    return (\r\n\r\n        <div className={lm.login}>\r\n            <form onSubmit={props.handleSubmit}>\r\n\r\n                <div>\r\n                    <img src={LoginUserPhoto} className={lm.imgUser}/>\r\n                    {CreateField(\"Enter the email\", \"email\", [required, maxLength50], Input)}\r\n                </div>\r\n\r\n                <div className={lm.passwordField}>\r\n                    {CreateField(\"Enter the password\", \"password\", [required, maxLength50],\r\n                        Input, {type: \"password\"})}\r\n                </div>\r\n\r\n                <div className={lm.rememberMe}>\r\n                    {CreateField(\"\", \"rememberMe\", [], \"input\", {type: \"checkbox\" },\r\n                        \"remember me\")}\r\n                </div>\r\n\r\n                {props.CaptchaUrl &&\r\n                <div>\r\n                    <img src={props.CaptchaUrl}/>\r\n                    {CreateField(\"Enter captcha symbols\", \"captcha\", [required],\r\n                        InputName)}\r\n                </div>\r\n                }\r\n                {props.error\r\n                    ?\r\n                    <div className={lm.AuthError}>\r\n                        {props.error}\r\n                    </div>\r\n                    : null}\r\n                <div>\r\n                    <button className={lm.button}> Enter</button>\r\n                </div>\r\n\r\n            </form>\r\n        </div>)\r\n}\r\n\r\n\r\nconst ReduxLoginForm = reduxForm<TLoginFormData,TLoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\nlet Login : React.FC<TLoginProps>= (props) => {\r\n\r\n    const PostUserDataToServer = (formData : TLoginFormData) => {\r\n\r\n        props.LoginThunk(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.IsLogined) {\r\n        return <Redirect to={\"/Profile\"}/>\r\n    }\r\n    return (<div>\r\n\r\n        <ReduxLoginForm onSubmit={PostUserDataToServer}\r\n                        CaptchaUrl={props.CaptchaUrl}/>\r\n    </div>)\r\n}\r\n\r\nexport default compose(\r\n    connect<T_MSTP_Login, T_MDTP_Login, LoginOwnProps, GlobalState>(MapStateToProps, {LoginThunk}),\r\n)(Login)","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    typography: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nexport default function HowToAuth() {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popover' : undefined;\r\n\r\n    return (\r\n        <div>\r\n            <Button aria-describedby={id} variant=\"outlined\" color=\"primary\" onClick={handleClick}>\r\n                need account?\r\n            </Button>\r\n            <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <Typography className={classes.typography}>\r\n                    if you need some account for tests just write me on xndqhacj@yandex.ru\r\n                </Typography>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Login from \"../../Login/Login\";\r\nimport HowToAuth from \"../../Login/AuthInfo\";\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)(props => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst LoginModalWindow = withStyles(theme => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\n\r\nexport default function CustomizedDialogs() {\r\n    const [open, setOpen] = React.useState(true);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button  variant=\"contained\" color=\"secondary\" onClick={handleClickOpen}>\r\n                authorise\r\n            </Button>\r\n            <Dialog   onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    Authentication windows\r\n                    <HowToAuth/>\r\n                </DialogTitle>\r\n                <LoginModalWindow dividers>\r\n                <Login/>\r\n                </LoginModalWindow>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","import React from \"react\"\r\nimport LoginModalWindow from \"../MaterialUI/ModalWindow/LoginModal\"\r\nimport lm from \"../Login/login.module.css\"\r\n\r\n\r\nconst LoginPage : React.FC<{}> = (props) => {\r\n    return <div className={lm.LoginPageAlarm}>\r\n        <h1>\r\n            you need authorization for watching this\r\n        </h1>\r\n        <div className={lm.AuthButton}>\r\n            <LoginModalWindow/>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default LoginPage","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ListIcon from '@material-ui/icons/ListAlt';\r\nimport {TTextFieldToDoListsProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\n const InputWithIcon : React.FC<TTextFieldToDoListsProps> = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n            <div className={classes.margin}>\r\n                <Grid container spacing={1} alignItems=\"flex-end\">\r\n                    <Grid item>\r\n                        <ListIcon />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField onChange={props.OnTextFieldCreateNewToDoListChanging}\r\n                                   id=\"input-with-icon-grid\"\r\n                                   placeholder={\"Enter new list name\"} />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n    );\r\n}\r\nexport default InputWithIcon","import React,{useState} from \"react\"\r\nimport InputWithIcon from \"./TextFieldToDoLists\";\r\nimport TDlistS from \"./CreateNewToDoList.module.css\"\r\nimport {TCreateNewToDoListProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst CreateNewToDoList : React.FC<TCreateNewToDoListProps> = (props) =>{\r\n    let[CreateNewToDoListMode,SetCreateNewToDoListMode] = useState(false);\r\n    let[CurrentValueOfCreateNewToDoListInput,SetCurrentValueOfCreateNewToDoListInput] = useState(\"\");\r\n\r\n    const OnTextFieldCreateNewToDoListChanging = (el : React.ChangeEvent<HTMLInputElement>) =>{\r\n     SetCurrentValueOfCreateNewToDoListInput(el.currentTarget.value)\r\n    }\r\n\r\n    const CreateToDoListON = () =>{\r\n        SetCreateNewToDoListMode(true)\r\n    };\r\n    const CreateToDoListOFF = () =>{\r\n        SetCreateNewToDoListMode(false)\r\n    }\r\n\r\n    const AddNewToDoList = () => {\r\n        if (CurrentValueOfCreateNewToDoListInput.length > 0 && CurrentValueOfCreateNewToDoListInput.length < 100) {\r\n            props.AddNewToDoListsThunk(CurrentValueOfCreateNewToDoListInput)\r\n            SetCreateNewToDoListMode(false)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return <div>\r\n        {!CreateNewToDoListMode &&\r\n            <div   className={TDlistS.CreateAndGoBackButtons}>\r\n                <button className={TDlistS.AddNewListButton} onClick={CreateToDoListON}>\r\n                    ADD NEW LIST\r\n                </button>\r\n            </div>\r\n\r\n        }\r\n\r\n        { CreateNewToDoListMode &&\r\n            <>\r\n                <div className={TDlistS.CreateAndGoBackButtons}>\r\n                    <button className={TDlistS.GoBacktButton} onClick={CreateToDoListOFF}>\r\n                       GO BACK\r\n                    </button>\r\n                </div>\r\n                <div className={TDlistS.AddNewListWrapper} >\r\n                    <InputWithIcon OnTextFieldCreateNewToDoListChanging={OnTextFieldCreateNewToDoListChanging} />\r\n                    <button onClick={AddNewToDoList} className={TDlistS.Addbutton} > add </button>\r\n                </div>\r\n        </>\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default CreateNewToDoList","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {TDeleteToDoListProps} from \"../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst DeleteToDoListButton : React.FC<TDeleteToDoListProps> =(props) =>{\r\n    const classes = useStyles();\r\n\r\n    const DeleteList = () =>{\r\n        props.Del(props.ListID)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                disabled={props.ShowTasksMode}\r\n                onClick={DeleteList}\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<DeleteIcon />}\r\n            >\r\n                Delete\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\nexport default DeleteToDoListButton","import React from 'react';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {TEditButtonProps} from \"../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\n const EditButton : React.FC<TEditButtonProps> =(props)=> {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Fab size={props.ButtonSize} color=\"secondary\" aria-label=\"edit\" >\r\n                <EditIcon onClick={props.HandleOnEdit} />\r\n            </Fab>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default EditButton","import React, {useState} from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport ListMenuIcon from '@material-ui/icons/MoreVert';\r\nimport DeleteToDoListButton from \"./DeleteToDoList\";\r\nimport EditButton from \"./EditButton\";\r\nimport TDLS from \"./ToDoLists.module.css\"\r\nimport {TListMenuProps} from \"../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst ToDoListMenuIcon : React.FC<TListMenuProps> = (props) => {\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const isMenuOpen = Boolean(anchorEl);\r\n\r\n\r\n    const handleProfileMenuOpen = (event : React.SetStateAction<any>)   => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleMenuClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n\r\n    const menuId = 'todo_list_menu_id';\r\n    const renderMenu = (\r\n        <Menu\r\n            anchorEl={anchorEl}\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            id={menuId}\r\n            keepMounted\r\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={isMenuOpen}\r\n            onClose={handleMenuClose}\r\n        >\r\n            <div className={TDLS.EditButtonPostition}>\r\n            <MenuItem onClick={handleMenuClose}>\r\n                <EditButton HandleOnEdit={props.EditTitleModeON}\r\n                            ButtonSize={\"small\"}/>\r\n            </MenuItem>\r\n            </div>\r\n            <MenuItem >\r\n                <DeleteToDoListButton ListID={props.ListID}\r\n                                      Del={props.Del}\r\n                                      ShowTasksMode={props.ShowTasksMode}/>\r\n            </MenuItem>\r\n        </Menu>\r\n    )\r\n\r\n    return <div>\r\n        <IconButton\r\n            edge=\"end\"\r\n            size=\"medium\"\r\n            aria-label=\"ToDo list menu\"\r\n            aria-controls={menuId}\r\n            aria-haspopup=\"true\"\r\n            onClick={handleProfileMenuOpen}\r\n            color=\"primary\"\r\n        >\r\n            <ListMenuIcon />\r\n        </IconButton>\r\n        {renderMenu}\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport default ToDoListMenuIcon;\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport {TSaveButtonProps} from \"../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst  SaveButton : React.FC<TSaveButtonProps> = (props)=> {\r\n    const classes = useStyles();\r\n\r\nconst SaveNewToDoListTitle = ()=>{\r\n    if(props.CurrentToDoListTitle.length !== 0 && props.CurrentToDoListTitle.length < 100 ) {\r\n        props.ChangeToDoListTitleThunk(props.ListID, props.CurrentToDoListTitle)\r\n        props.EditTitleModeOFF()\r\n    }\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={SaveNewToDoListTitle}\r\n                size=\"small\"\r\n                className={classes.button}\r\n                startIcon={<SaveIcon />}\r\n            >\r\n                Save\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\nexport default SaveButton","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport GoBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {TGoBackButtonProps} from \"../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst GoBackButton : React.FC<TGoBackButtonProps>= (props)=> {\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={props.HandleOnClick}\r\n                size=\"small\"\r\n                startIcon={<GoBackIcon  />}\r\n            >\r\n                Back\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\nexport default GoBackButton","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {TTitleChangeFieldProps} from \"../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nconst TitleChangingField : React.FC<TTitleChangeFieldProps> = (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <form className={classes.container} noValidate autoComplete=\"off\">\r\n            <div>\r\n                <TextField\r\n                    onChange={props.OnToDoListTitleChanging}\r\n                    id=\"ToDoListChangingField\"\r\n                    value={props.CurrentToDoListTitle}\r\n                    className={classes.textField}\r\n                    helperText=\"maximum 100 symbols\"\r\n                    margin=\"normal\"\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\nexport default TitleChangingField","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {TAddNewTaskButtonProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst  AddNewTaskButton : React.FC<TAddNewTaskButtonProps> = (props)=> {\r\n    const classes = useStyles();\r\n\r\n    const AddNewTask = ()=>{\r\n        if(props.AddNewTaskFieldCurrentValue.length >0 && props.AddNewTaskFieldCurrentValue.length <100) {\r\n            props.AddNewTaskThunk(props.ListID, props.AddNewTaskFieldCurrentValue)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={AddNewTask}\r\n                size=\"small\"\r\n                className={classes.button}\r\n            >\r\n                add task\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\nexport default AddNewTaskButton","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {TAddNewTaskFieldProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 600,\r\n    },\r\n}));\r\n\r\nconst AddTaskField : React.FC<TAddNewTaskFieldProps>= (props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <form className={classes.container} noValidate autoComplete=\"off\">\r\n            <div>\r\n                <TextField\r\n                    onChange={props.OnAddNewTaskFieldChange}\r\n                    id=\"AddTaskFieldID\"\r\n                    className={classes.textField}\r\n                    placeholder=\"Enter new task title\"\r\n                    helperText=\"maximum 100 symbols\"\r\n                    margin=\"normal\"\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\nexport default AddTaskField","import React,{useState} from \"react\"\r\nimport TDLS from \"../ToDoLists.module.css\";\r\nimport AddNewTaskButton from \"./AddNewTaskButton\";\r\nimport AddTaskField from \"./AddNewTaskField\";\r\nimport {TAddNewTaskProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst AddNewTask : React.FC<TAddNewTaskProps>= (props) => {\r\n    let [AddNewTaskFieldCurrentValue,SetAddNewTaskFieldCurrentValue] = useState(\"\")\r\n\r\n    const OnAddNewTaskFieldChange = (el : React.ChangeEvent<HTMLInputElement>)=>{\r\n        SetAddNewTaskFieldCurrentValue(el.currentTarget.value)\r\n    }\r\n   return  <div className={TDLS.AddNewTaskWrapper}>\r\n            <div >\r\n                <AddTaskField OnAddNewTaskFieldChange={OnAddNewTaskFieldChange}/>\r\n            </div>\r\n\r\n            <div className={TDLS.AddTaskButton}>\r\n                <AddNewTaskButton ListID={props.ListID}\r\n                                  AddNewTaskThunk={props.AddNewTaskThunk}\r\n                                  AddNewTaskFieldCurrentValue={AddNewTaskFieldCurrentValue}\r\n                />\r\n            </div>\r\n\r\n    </div>\r\n}\r\nexport default AddNewTask","import React from 'react';\r\nimport ShowIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport {TShowTasksButtonProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\n\r\nconst  ShowTasksButton : React.FC<TShowTasksButtonProps>= (props)=> {\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Fab disabled={props.ButtonIsDesabled} onClick={props.HandleOnClick}  size=\"small\" color=\"primary\" aria-label=\"edit\" >\r\n                <ShowIcon/>\r\n            </Fab>\r\n        </div>\r\n    );\r\n}\r\nexport default ShowTasksButton","import React from 'react';\r\nimport HideIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Fab from \"@material-ui/core/Fab\";\r\n\r\n\r\n\r\nconst  HideTasksButton : React.FC<{ HandleOnClick : ()=> void}> = (props)=> {\r\n    return (\r\n        <div>\r\n            <Fab  onClick={props.HandleOnClick} size=\"small\" color=\"primary\" aria-label=\"edit\" >\r\n                <HideIcon  />\r\n            </Fab>\r\n        </div>\r\n    );\r\n}\r\nexport default HideTasksButton","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutline';\r\nimport {TDeleteTaskButtonProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst DeleteButton : React.FC<TDeleteTaskButtonProps> = (props)=> {\r\n\r\n    const DeleteTask = ()=>{\r\n        props.DeleteTaskThunk(props.ListID,props.TaskID)\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Button\r\n                disabled={props.ShowButtonBlocked}\r\n                variant=\"text\"\r\n                color=\"inherit\"\r\n                onClick={DeleteTask}\r\n                size=\"large\"\r\n                startIcon={<DeleteIcon />}\r\n            >\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\nexport default DeleteButton","import React from 'react';\r\nimport Done from '@material-ui/icons/Done';\r\n\r\nconst TaskDoneIcon : React.FC<{}>  = (props)=> {\r\n\r\n    return (\r\n        <div>\r\n            <Done color=\"secondary\"  />\r\n        </div>\r\n    );\r\n}\r\nexport default TaskDoneIcon","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport EditButton from '@material-ui/icons/Edit';\r\nimport {TEditTaskButtonProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst EditTaskButton : React.FC<TEditTaskButtonProps> = (props)=> {\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                disabled={props.ShowButtonBlocked}\r\n                variant=\"text\"\r\n                color=\"primary\"\r\n                onClick={props.HandleOnClick}\r\n                size=\"large\"\r\n                startIcon={<EditButton />}\r\n            >\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\nexport default EditTaskButton","import React from 'react';\r\nimport DetailsIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {TTaskShowDetailsProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst TaskShowDetailsIcon : React.FC<TTaskShowDetailsProps> = (props)=> {\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant=\"text\"\r\n                disabled={props.ShowButtonBlocked}\r\n                color=\"primary\"\r\n                onClick={props.HandleOnClick}\r\n                size=\"large\"\r\n                startIcon={<DetailsIcon />}\r\n            >\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\nexport default TaskShowDetailsIcon","import React from 'react';\r\nimport DetailsIconUP from '@material-ui/icons/KeyboardArrowUp';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {TTaskHideDetailsProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst TaskHideDetailsIcon : React.FC<TTaskHideDetailsProps>= (props)=> {\r\n\r\n    return (\r\n        <div>\r\n            <Button\r\n                variant=\"text\"\r\n                color=\"primary\"\r\n                onClick={props.HandleOnClick}\r\n                size=\"large\"\r\n                startIcon={<DetailsIconUP />}\r\n            >\r\n            </Button>\r\n        </div>\r\n    );\r\n}\r\nexport default TaskHideDetailsIcon","export const DateTransform = (date:  string | null) =>{\r\n    if(date ) {\r\n        //@ts-ignore\r\n        return date.split(\"T\")[0].split().join().split(\"-\").reverse()\r\n    }\r\n}","import React,{useState} from \"react\"\r\nimport ts from \"./Tasks.module.css\";\r\nimport TaskShowDetailsIcon from \"./TaskShowDetailsIcon\";\r\nimport TaskHideDetailsIcon from \"./TaskHideDetails\";\r\nimport {DateTransform} from \"../../utils/dateTransform\"\r\nimport {TTaskDetailsProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\n\r\nconst TaskDetails : React.FC<TTaskDetailsProps> = (props) => {\r\n\r\n    let [ShowDetails, SetShowDetails] = useState(false)\r\n\r\n    let AddedDate = DateTransform(props.CurrentTask.startDate)\r\n    let DeadLineDate = DateTransform(props.CurrentTask.deadline)\r\n\r\n    const ShowDetailsON = () => {\r\n        SetShowDetails(true)\r\n        props.ShowButtonBlockedON()\r\n    }\r\n\r\n    const ShowDetailsOFF = () => {\r\n        SetShowDetails(false)\r\n        props.ShowButtonBlockedOFF()\r\n    }\r\n    return <div >\r\n\r\n        {ShowDetails ?\r\n            <div>\r\n            <div className={ts.detailsWrapper}>\r\n\r\n                <div className={ts.startDate}>\r\n                    {props.CurrentTask.startDate ?\r\n                        \"start date :\" + AddedDate[0]+\"/\"+AddedDate[1]+\"/\"+AddedDate[2]\r\n                        : \"no started date data\"\r\n                    }\r\n                </div>\r\n\r\n                <div className={ts.deadline}>\r\n\r\n                    {props.CurrentTask.deadline ?\r\n                        \"deadline :\"  + DeadLineDate[0]+\"/\"+DeadLineDate[1]+\"/\"+DeadLineDate[2]\r\n                        : \"no deadline data\"\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n                <div className={ts.description}>\r\n                    description :\r\n                    <div className={ts.descriptionText}>\r\n                        {props.CurrentTask.description?\r\n                        props.CurrentTask.description:\r\n                        \"no description data\"}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className={ts.DetailsButton}>\r\n                    <TaskHideDetailsIcon HandleOnClick={ShowDetailsOFF} />\r\n                </div>\r\n            </div>\r\n            :\r\n\r\n            <div className={ts.DetailsButton}>\r\n                <TaskShowDetailsIcon ShowButtonBlocked={props.ShowButtonBlocked}\r\n                                     HandleOnClick={ShowDetailsON}/>\r\n            </div>\r\n        }\r\n\r\n    </div>\r\n}\r\n\r\nexport default TaskDetails","import React from 'react';\r\nimport NotDone from '@material-ui/icons/Clear';\r\n\r\nconst NotDoneIcon :React.FC<{}> = (props)=> {\r\n\r\n    return (\r\n        <div>\r\n            <NotDone color=\"secondary\"  />\r\n        </div>\r\n    );\r\n}\r\nexport default NotDoneIcon","import React from \"react\"\r\nimport {\r\n    CreateField,\r\n    TaskFormInput, ContactFormInput\r\n} from \"../../assetss/common/ValidatorsComponents/ElementsValidators\";\r\nimport {MaxLengthCreator, required} from \"../../utils/validators\";\r\nimport ts from \"./Tasks.module.css\";\r\nimport GoBackButton from \"../GoBackButton\";\r\n\r\nimport {InjectedFormProps} from \"redux-form\";\r\nimport {ToDoListTaskStatusType, TTaskEditFormOwnProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\nconst maxlength50 = MaxLengthCreator(50)\r\nconst maxlength100 = MaxLengthCreator(100)\r\n\r\nconst TaskEditForm : React.FC<InjectedFormProps<ToDoListTaskStatusType, TTaskEditFormOwnProps> & TTaskEditFormOwnProps >\r\n    = (props) => {\r\ndebugger\r\n    return <div>\r\n\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={ts.TaskFormWrapper}>\r\n\r\n                <div className={ts.TaskEditFromButtons}>\r\n\r\n                    <button className={ts.TaskFormSaveButton}>\r\n                        save\r\n                    </button>\r\n\r\n                    <div className={ts.GoBackButton}>\r\n                        <GoBackButton HandleOnClick={props.TaskEditModeOFF}/>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n                <div>\r\n\r\n                    <div className={props.TaskExecutedStyleForWindow}>\r\n\r\n                            <div className={ts.Title}>\r\n                                Task title :\r\n                                {CreateField(\"title\", \"title\", [required, maxlength50], ContactFormInput)}\r\n                            </div>\r\n                        <div className={ts.CompletedFieldWrapper}>\r\n                            <span className={ts.cc}>\r\n                                    Completed?\r\n                            </span>\r\n\r\n                            <span >\r\n                                {CreateField(\"completed\", \"completed\", [], TaskFormInput, {type: \"checkbox\"})}\r\n                            </span>\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className={ts.detailsWrapper}>\r\n                            <div className={ts.startDate}>\r\n                                Start date :\r\n                                {CreateField(\"must be like 11/01/2019\", \"startDate\", [maxlength50], ContactFormInput, {type: \"date\"})}\r\n                            </div>\r\n\r\n                            <div className={ts.deadline}>\r\n                                deadline :\r\n                                {CreateField(\"must be like 11/11/2019\", \"deadline\", [maxlength50], ContactFormInput, {type: \"date\"})}\r\n                            </div>\r\n                        </div>\r\n                        <div className={ts.FormDescription}>\r\n                            description :\r\n                            {CreateField(\"description\", \"description\", [maxlength100], ContactFormInput)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </form>\r\n    </div>\r\n}\r\n\r\nexport default TaskEditForm","import React, {useState,useEffect} from \"react\"\r\nimport ts from \"./Tasks.module.css\"\r\nimport classNames from 'classnames';\r\nimport DeleteButton from \"./DeleteTaskButton\";\r\nimport TaskDoneIcon from \"./DoneIcone\";\r\nimport EditTaskButton from \"./EditTaskButton\";\r\nimport TaskDetails from \"./TaskDetails\";\r\nimport NotDoneIcon from \"./NotDoneIcon\";\r\nimport TaskEditForm from \"./TaskEditForm\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {DateTransform} from \"../../utils/dateTransform\";\r\nimport {\r\n    ToDoListTaskStatusType,\r\n    TTaskEditFormOwnProps,\r\n    TTaskProps\r\n} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst Task : React.FC<TTaskProps> = (props) => {\r\n\r\n    let [TaskEditMode, SetTaskEditMode] = useState(false)\r\n    let [status, SetStatus] = useState<ToDoListTaskStatusType>({\r\n        completed : props.CurrentTask.completed,\r\n        deadline : props.CurrentTask.deadline,\r\n        description : props.CurrentTask.description,\r\n        priority : props.CurrentTask.priority,\r\n        startDate : props.CurrentTask.startDate,\r\n        status : props.CurrentTask.status,\r\n        title : props.CurrentTask.title\r\n    })\r\n\r\n    let TrueStartDate = DateTransform(props.CurrentTask.startDate)\r\n    let TrueDeadLine = DateTransform(props.CurrentTask.deadline)\r\n\r\nconst TrueObjMaker=(status : object,TrueStartDate : Array<string>,TrueDeadLine :  Array<string>)=>{\r\n        if (status && TrueStartDate && TrueDeadLine  )\r\n        {\r\n            return Object.assign({...status},{ startDate:TrueStartDate[2]+\"-\"+TrueStartDate[1]+\"-\"+TrueStartDate[0],\r\n                deadline :TrueDeadLine[2]+\"-\"+TrueDeadLine[1]+\"-\"+TrueDeadLine[0] })\r\n\r\n        }\r\n}\r\n\r\n\r\n    useEffect(() => {\r\n        SetStatus(props.CurrentTask)\r\n        }, [props.CurrentTask]\r\n    )\r\n\r\n\r\n\r\n    const TaskEditModeON = () => {\r\n        SetTaskEditMode(true)\r\n    }\r\n    const TaskEditModeOFF = () => {\r\n        SetTaskEditMode(false)\r\n    }\r\n    const TaskExecutedStyleForWindow = classNames({\r\n        [ts.Ramka] : !props.CurrentTask.completed,\r\n        [ts.DoneRamka] : props.CurrentTask.completed\r\n    })\r\n\r\n    const SaveNewToDoListTaskInfo= (formData : ToDoListTaskStatusType)=>{\r\n        props.UpdateTaskInformationThunk(props.CurrentTask.todoListId,props.CurrentTask.id,formData)\r\n        TaskEditModeOFF()\r\n    }\r\n\r\n    return <div>\r\n        {\r\n\r\n            !TaskEditMode ?\r\n            <div  className={ts.Main}>\r\n\r\n                <div className={classNames(ts.MainWrapper)}>\r\n\r\n                    <div className={ts.TaskEditButton}>\r\n                        <EditTaskButton ShowButtonBlocked={props.ShowButtonBlocked} ButtonSize={\"small\"} HandleOnClick={TaskEditModeON}/>\r\n                    </div>\r\n\r\n                    <div className={TaskExecutedStyleForWindow}>\r\n                        <div className={ts.TaskBodyWrapper}>\r\n                            {props.CurrentTask.completed ?\r\n                                <div className={ts.iconStatus}>\r\n                                    <TaskDoneIcon/>\r\n                                </div>\r\n                                :\r\n                                <div className={ts.iconStatus}>\r\n                                    <NotDoneIcon/>\r\n                                </div>\r\n                            }\r\n\r\n\r\n                            <div className={ts.Title}>\r\n                                {props.CurrentTask.title}\r\n                            </div>\r\n\r\n\r\n                            <div className={ts.ToTrashIcon}>\r\n                                <DeleteButton DeleteTaskThunk={props.DeleteTaskThunk}\r\n                                              ShowButtonBlocked={props.ShowButtonBlocked}\r\n                                              ListID={props.CurrentTask.todoListId} TaskID={props.CurrentTask.id}/>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div>\r\n                            <TaskDetails\r\n                                ShowButtonBlocked={props.ShowButtonBlocked}\r\n                                CurrentTask={props.CurrentTask}\r\n                                ShowButtonBlockedON={props.ShowButtonBlockedON}\r\n                                ShowButtonBlockedOFF={props.ShowButtonBlockedOFF}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n                :\r\n                <div>\r\n                    <TaskEditFormRedux\r\n                                    initialValues={TrueStartDate && TrueDeadLine\r\n                                           ? TrueObjMaker(status,TrueStartDate,TrueDeadLine)\r\n                                           : status\r\n                                       }\r\n                                       TaskEditModeOFF={TaskEditModeOFF}\r\n                                       ListID={props.CurrentTask.todoListId}\r\n                                       TaskID={props.CurrentTask.id}\r\n                                       onSubmit={SaveNewToDoListTaskInfo}\r\n                                       TaskExecutedStyleForWindow={TaskExecutedStyleForWindow}\r\n                    />\r\n                </div>\r\n        }\r\n\r\n    </div>\r\n}\r\n\r\nconst TaskEditFormRedux = reduxForm<ToDoListTaskStatusType,TTaskEditFormOwnProps>({form: 'TaskEditorForm'})(TaskEditForm)\r\n\r\nexport default Task","import React, {useState, useEffect} from \"react\"\r\nimport ts from \"./Tasks.module.css\"\r\nimport Task from \"./Task\";\r\nimport {TTasksProps} from \"../../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst Tasks : React.FC<TTasksProps> = (props) => {\r\n\r\n    let [TasksData, SetTasksData] = useState(props.ToDoListTasks)\r\n    let [ShowButtonBlocked, SetShowButtonBlocked] = useState(false)\r\n\r\n\r\n    const ShowButtonBlockedON = () => {\r\n        SetShowButtonBlocked(true)\r\n    }\r\n\r\n    const ShowButtonBlockedOFF = () => {\r\n        SetShowButtonBlocked(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n            SetTasksData(props.ToDoListTasks)\r\n        }, [props.ToDoListTasks]\r\n    )\r\n\r\n\r\n\r\n    return <div>\r\n        {\r\n\r\n\r\n            TasksData.map(task => {\r\n\r\n                return <div key={task.id} className={ts.Main}>\r\n\r\n                    <Task\r\n                          UpdateTaskInformationThunk={props.UpdateTaskInformationThunk}\r\n                          ShowButtonBlocked={ShowButtonBlocked}\r\n                          CurrentTask={task}\r\n                          DeleteTaskThunk={props.DeleteTaskThunk}\r\n                          ShowButtonBlockedON={ShowButtonBlockedON}\r\n                          ShowButtonBlockedOFF={ShowButtonBlockedOFF}\r\n                    />\r\n\r\n                </div>\r\n            })\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default Tasks","import React, {useState, useEffect} from \"react\"\r\nimport TDLS from \"./ToDoLists.module.css\";\r\nimport ToDoListMenuIcon from \"./ListMenu\";\r\nimport SaveButton from \"./SaveButton\";\r\nimport GoBackButton from \"./GoBackButton\";\r\nimport TitleChangingField from \"./TitleChangeField\";\r\nimport AddNewTask from \"./AddNewTask/AddNewTask\";\r\nimport ShowTasksButton from \"./ToDoListTasks/ShowTasksButton\";\r\nimport HideTasksButton from \"./ToDoListTasks/HideTasksButton\";\r\nimport Tasks from \"./ToDoListTasks/Tasks\";\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\nimport {TTodoListProps} from \"../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst ToDoList : React.FC<TTodoListProps> = (props) => {\r\n    let [EditTitleMode, SetEditTitleMode] = useState(false)\r\n    let [ShowTasksMode, SetShowTasksMode] = useState(false)\r\n    let [CurrentToDoListTitle, SetToDoListTitle] = useState(props.title)\r\n\r\n    const EditTitleModeON = () => {\r\n        SetEditTitleMode(true)\r\n    }\r\n\r\n\r\n    const EditTitleModeOFF = () => {\r\n        SetEditTitleMode(false)\r\n    }\r\n\r\n    const OnToDoListTitleChanging = (el : React.ChangeEvent<HTMLInputElement>) => {\r\n        SetToDoListTitle(el.currentTarget.value)\r\n    }\r\n\r\n    const ShowTask = () => {\r\n        props.GetToDoListTasksThunk(props.ListID, props.ToDoListTasksCount, props.ToDoListTasksPage)\r\n        SetShowTasksMode(true)\r\n        props.ButtonIsDesabledON()\r\n    }\r\n\r\n    const ShowTaskModeOFF = () => {\r\n        SetShowTasksMode(false)\r\n        props.ButtonIsDesabledOFF()\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n            SetToDoListTitle(props.title)\r\n        }, [props.title]\r\n    )\r\n\r\n\r\n\r\n\r\n    return <div>\r\n        {!EditTitleMode ?\r\n            <div className={TDLS.ToDolistsWrapper}>\r\n\r\n                <ToDoListMenuIcon ListID={props.ListID}\r\n                                  ShowTasksMode={ShowTasksMode}\r\n                                  EditTitleModeON={EditTitleModeON}\r\n                                  Del={props.DeleteToDoListThunk}/>\r\n\r\n                <div className={TDLS.ToDoListTitle}>\r\n                    {props.title}\r\n                </div>\r\n            </div>\r\n\r\n            :\r\n            <div className={TDLS.ToDolistsChanchingWrapper}>\r\n                <div>\r\n                    <SaveButton ListID={props.ListID} ChangeToDoListTitleThunk={props.ChangeToDoListTitleThunk}\r\n                                EditTitleModeOFF={EditTitleModeOFF} CurrentToDoListTitle={CurrentToDoListTitle}/>\r\n                    <GoBackButton HandleOnClick={EditTitleModeOFF}/>\r\n                </div>\r\n                <div className={TDLS.ToDoListChangingInput}>\r\n                    <TitleChangingField OnToDoListTitleChanging={OnToDoListTitleChanging}\r\n                                        CurrentToDoListTitle={CurrentToDoListTitle}/>\r\n                </div>\r\n\r\n            </div>\r\n        }\r\n\r\n        {ShowTasksMode ?\r\n\r\n            <div>\r\n\r\n                {props.TaskIsFetching ? <Preloader/> :\r\n                    <>\r\n                    <AddNewTask ListID={props.ListID}\r\n                                AddNewTaskThunk={props.AddNewTaskThunk}/>\r\n\r\n                    <div>\r\n                        {\r\n                            props.ToDoListTasks &&\r\n                                <div className={TDLS.tasksposititon}>\r\n                                    <Tasks\r\n                                        DeleteTaskThunk={props.DeleteTaskThunk}\r\n                                        ToDoListTasks={props.ToDoListTasks}\r\n                                        UpdateTaskInformationThunk={props.UpdateTaskInformationThunk}\r\n                                    />\r\n                                </div>\r\n                        }\r\n\r\n                    <div className={TDLS.HideTasksButton}>\r\n                    <HideTasksButton HandleOnClick={ShowTaskModeOFF}/>\r\n                    </div>\r\n\r\n                    </div>\r\n\r\n                    </>\r\n                }\r\n            </div>\r\n            :\r\n            <div className={TDLS.ShowTasksButton}>\r\n                <ShowTasksButton ShowTasksMode={ShowTasksMode}\r\n                                 HandleOnClick={ShowTask}\r\n                                 ButtonIsDesabled={props.ButtonIsDesabled}\r\n                />\r\n            </div>\r\n\r\n        }\r\n    </div>\r\n}\r\nexport default ToDoList","import React,{useState} from \"react\"\r\nimport CreateNewToDoList from \"./CreateNewToDoList/CreateNewToDoList\";\r\nimport TDLS from \"./ToDoLists.module.css\"\r\nimport ToDoList from \"./ToDoList\";\r\nimport {\r\n    TTodoListsProps\r\n} from \"../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\n\r\nconst ToDoLists : React.FC<TTodoListsProps> = (props) => {\r\nlet [ButtonIsDesabled,SetButtonIsDesabled] = useState(false)\r\n\r\n    const ButtonIsDesabledON=()=>{\r\n        SetButtonIsDesabled(true)\r\n    }\r\n    const ButtonIsDesabledOFF=()=>{\r\n        SetButtonIsDesabled(false)\r\n    }\r\n    return <div>\r\n        <CreateNewToDoList AddNewToDoListsThunk={props.AddNewToDoListsThunk}/>\r\n        {props.ToDoLists &&\r\n        props.ToDoLists.map(key => {\r\n            return <div className={TDLS.ToDoListsPosition} key={key.id}>\r\n\r\n                <ToDoList {...props}\r\n                          ListID={key.id}\r\n                          title={key.title}\r\n                          ButtonIsDesabled={ButtonIsDesabled}\r\n                          ButtonIsDesabledON={ButtonIsDesabledON}\r\n                          ButtonIsDesabledOFF={ButtonIsDesabledOFF}\r\n                />\r\n            </div>\r\n        })\r\n        }\r\n    </div>\r\n}\r\n\r\nexport default ToDoLists","import {GlobalState} from \"./redux-store\";\r\n\r\nexport const GetToDoLists = (state : GlobalState) =>{\r\n    return state.ToDoListsData.ToDoLists\r\n}\r\nexport const GetToDoListTasksPage = (state : GlobalState) =>{\r\n    return state.ToDoListsData.ToDoListTasksPage\r\n}\r\nexport const GetToDoListTasksCount = (state : GlobalState) =>{\r\n    return state.ToDoListsData.ToDoListTasksCount\r\n}\r\nexport const GetToDoListTasks = (state : GlobalState) =>{\r\n    return state.ToDoListsData.ToDoListTasks\r\n}\r\nexport const GetToDoListIsFetching = (state : GlobalState) =>{\r\n    return state.ToDoListsData.IsFetching\r\n}\r\nexport const GetToDoListTaskIsFetching = (state : GlobalState) =>{\r\n    return state.ToDoListsData.TaskIsFetching\r\n}","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {AuthRedirect} from \"../hocs/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport ToDoLists from \"./ToDoLists\";\r\nimport {\r\n    GetToDoListIsFetching,\r\n    GetToDoLists, GetToDoListTaskIsFetching,\r\n    GetToDoListTasks,\r\n    GetToDoListTasksCount,\r\n    GetToDoListTasksPage\r\n} from \"../../data/ToDoListsSelectors\";\r\nimport {\r\n    SetToDoListTasksPage, SetToDoListTasksCount, GetToDoListsThunk, AddNewToDoListsThunk,\r\n    DeleteToDoListThunk,ChangeToDoListTitleThunk,\r\n    GetToDoListTasksThunk,AddNewTaskThunk,DeleteTaskThunk,\r\n    UpdateTaskInformationThunk\r\n} from \"../../data/ToDoListsReducer\"\r\nimport Preloader from \"../assetss/common/Loader/Loader\";\r\nimport {GlobalState} from \"../../data/redux-store\";\r\nimport {\r\n    T_MDTP_ToDoListContainer,\r\n    T_MSTP_ToDoListContainer,\r\n    TToDoListContainerOwnProps\r\n} from \"../GlobalTypes/ToDoListsTypes/ToDoListsTypes\";\r\n\r\ntype TToDoListsContainerProps = T_MSTP_ToDoListContainer & T_MDTP_ToDoListContainer & TToDoListContainerOwnProps\r\n\r\nclass ToDoListsContainer extends React.Component<TToDoListsContainerProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.GetToDoListsThunk();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {\r\n                    this.props.IsFetching ? <Preloader/> :\r\n                    <ToDoLists {...this.props} />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nlet StateToProps = (state : GlobalState)  : T_MSTP_ToDoListContainer=> ({\r\n    ToDoLists: GetToDoLists(state),\r\n    ToDoListTasksPage: GetToDoListTasksPage(state),\r\n    ToDoListTasksCount: GetToDoListTasksCount(state),\r\n    ToDoListTasks : GetToDoListTasks(state),\r\n    IsFetching : GetToDoListIsFetching(state),\r\n    TaskIsFetching : GetToDoListTaskIsFetching(state)\r\n})\r\n\r\nexport default compose(connect<T_MSTP_ToDoListContainer ,T_MDTP_ToDoListContainer  ,TToDoListContainerOwnProps, GlobalState>(StateToProps,\r\n    {\r\n        SetToDoListTasksPage, SetToDoListTasksCount,\r\n        GetToDoListsThunk, AddNewToDoListsThunk,\r\n        DeleteToDoListThunk,ChangeToDoListTitleThunk,\r\n        GetToDoListTasksThunk,AddNewTaskThunk,DeleteTaskThunk,\r\n        UpdateTaskInformationThunk\r\n    }),\r\n    AuthRedirect)(ToDoListsContainer)","import React, {Component} from 'react';\nimport './App.css';\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport {Redirect, Route, withRouter} from \"react-router-dom\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\nimport {compose} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {InitializationAPPthunk} from \"./data/InitializatonReducer\";\nimport Preloader from \"./components/assetss/common/Loader/Loader\";\nimport MessagesContainer from \"./components/Dialogs/Message/MessagesContainer\";\nimport {GetinitionSelector} from \"./data/InitialozationSelectors\";\nimport {GetNewMessagesCountThunk} from \"./data/DIalogsReduser\";\nimport LoginPage from \"./components/Login/LoginPage\";\nimport ToDoListsContainer from \"./components/ToDoLists/ToDoListsContainer\";\nimport {GetIsLoginedSelector} from \"./data/AuthSelectors\";\nimport {GlobalState} from \"./data/redux-store\";\nimport {T_MDTP_App, T_MSTP_App, TAppOwnProps} from \"./components/GlobalTypes/AppTypes/AppTypes\";\n\ntype TAppProps = T_MSTP_App & T_MDTP_App & TAppOwnProps\n\nclass App extends Component<TAppProps> {\n    componentDidMount() {\n        this.props.InitializationAPPthunk()\n    }\n\n    render() {\n\n        if (!this.props.inition) {\n            return <Preloader/>\n        }\n        return (\n\n            <div className='wrapper'>\n                    <HeaderContainer  />\n\n\n                <div className=\"app-wrapper-content\">\n\n                    <Route exact path='/'\n                           render={() => <Redirect to={\"Profile/\"}/>}/>\n\n                    <Route path='/dialogs/'\n                           //@ts-ignore\n                           render={() => <DialogsContainer/>}/>\n                    <Route path='/messages/:userID?'\n                        //@ts-ignore\n                           render={() => <MessagesContainer/>}/>\n\n                    <Route path='/Profile/:userID?'\n                        //@ts-ignore\n                           render={() => <ProfileContainer/>}/>\n\n\n                    <Route exact path='/Users' render={() => <UsersContainer/>}/>\n\n                    <Route exact path='/Login' render={() => <LoginPage/>}/>\n\n                   \n                    <Route exact path='/ToDoLists'\n                        //@ts-ignore\n                           render={() =>  <ToDoListsContainer/>}/>\n\n\n                </div>\n            </div>\n        );\n    }\n}\n\nconst MapStateToProps = (state : GlobalState) => ({inition: GetinitionSelector(state),\n    IsLogined: GetIsLoginedSelector(state)})\n\nexport default compose(\n    connect(MapStateToProps, {InitializationAPPthunk,GetNewMessagesCountThunk}),\n    withRouter)(App)\n","\nimport React from 'react'\nimport * as serviceWorker from './serviceWorker';\nimport store from './data/redux-store'\nimport ReactDOM from \"react-dom\";\nimport {BrowserRouter,HashRouter} from \"react-router-dom\";\nimport App from \"./App\";\nimport {Provider} from \"react-redux\";\n\n\n/* Hashrouter use for  adding on git ,\n\n      /* <HashRouter>*/\n\n/* </HashRouter>,*/\n    ReactDOM.render(\n       <HashRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App  />\n        </Provider>\n       </HashRouter>,\n        document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Main\":\"Dialogs_Main__fgm98\",\"DialogUserPhoto\":\"Dialogs_DialogUserPhoto__2S4Tu\",\"padding\":\"Dialogs_padding__3E-h0\",\"dialogs\":\"Dialogs_dialogs__BjYAn\",\"dialogsItems\":\"Dialogs_dialogsItems__1VDH2\",\"active\":\"Dialogs_active__2EN3N\",\"messages\":\"Dialogs_messages__1bTDr\",\"img\":\"Dialogs_img__1DEd5\",\"header\":\"Dialogs_header__xOCfp\",\"button\":\"Dialogs_button__30gtx\",\"DialogArea\":\"Dialogs_DialogArea__2YCQ-\",\"item\":\"Dialogs_item__be1yr\",\"activeLink\":\"Dialogs_activeLink__309Uh\",\"deleteMessageStyle\":\"Dialogs_deleteMessageStyle__3GrY8\",\"ConfirmText\":\"Dialogs_ConfirmText__3Xy4I\",\"ToTrash\":\"Dialogs_ToTrash__3Py0m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"login_login__2XLpg\",\"imgUser\":\"login_imgUser__3RvPz\",\"rememberMe\":\"login_rememberMe__1T4hC\",\"button\":\"login_button__1BAOG\",\"bg\":\"login_bg__3ae0b\",\"bg10\":\"login_bg10__O5xrp\",\"AuthError\":\"login_AuthError__1kfh-\",\"LoginPageAlarm\":\"login_LoginPageAlarm__19tn1\",\"logModalWindow\":\"login_logModalWindow__1r3QB\",\"AuthButton\":\"login_AuthButton__242Z_\",\"check\":\"login_check__nLPBC\",\"passwordField\":\"login_passwordField__QuyqD\"};","module.exports = __webpack_public_path__ + \"static/media/userPhoto.f86bd3d2.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"UsersWrapper\":\"Users_UsersWrapper__3r0iU\",\"Main\":\"Users_Main__2xXSo\",\"img\":\"Users_img__2oaoF\",\"follow\":\"Users_follow__2uAmx\",\"Names\":\"Users_Names__1_6so\",\"Posts\":\"Users_Posts__3kZD6\",\"Country\":\"Users_Country__3gYtG\",\"City\":\"Users_City__2_dM7\",\"unfollow\":\"Users_unfollow__1O1QN\",\"PaginatorPosition\":\"Users_PaginatorPosition__2Q4mW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FoundedUsersWrapper\":\"FindUser_FoundedUsersWrapper__m1B-E\",\"GoBack\":\"FindUser_GoBack__2YgqT\",\"foundArea\":\"FindUser_foundArea__2UM3r\",\"SearchingResult\":\"FindUser_SearchingResult__1rxlW\",\"FoundedUsers\":\"FindUser_FoundedUsers__Z4_bH\",\"FindUserButton\":\"FindUser_FindUserButton__1BxTF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddNewListWrapper\":\"CreateNewToDoList_AddNewListWrapper__3QLwt\",\"Addbutton\":\"CreateNewToDoList_Addbutton__38Fgq\",\"CreateAndGoBackButtons\":\"CreateNewToDoList_CreateAndGoBackButtons__3WyiO\",\"AddNewListButton\":\"CreateNewToDoList_AddNewListButton__15LRB\",\"GoBacktButton\":\"CreateNewToDoList_GoBacktButton__1yyLX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ProfileData_contacts__1hcZY\",\"aboutME\":\"ProfileData_aboutME__2RKXo\",\"buttonEditInformation\":\"ProfileData_buttonEditInformation__DJ_Eq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"numbers\":\"Paginator_numbers__1V04X\",\"setNumbers\":\"Paginator_setNumbers__L_c7_\",\"button\":\"Paginator_button__24DIp\",\"NumbersFont\":\"Paginator_NumbersFont__2D9CN\"};"],"sourceRoot":""}